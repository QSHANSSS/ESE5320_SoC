-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encoding_hash_func is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    key_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_offset : IN STD_LOGIC_VECTOR (12 downto 0);
    len : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of encoding_hash_func is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_321 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_333 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal temp_key_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_338 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal empty_45_fu_342_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond3_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_359_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_reg_680 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln30_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_685 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal temp_key_load_2_reg_714 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_key_load_1_reg_724 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal temp_key_load_4_reg_734 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_47_fu_401_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_47_reg_754 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal empty_49_fu_422_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_49_reg_769 : STD_LOGIC_VECTOR (8 downto 0);
    signal hash_5_fu_428_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal hash_5_reg_774 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_50_fu_441_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_50_reg_789 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_48_fu_455_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_48_reg_804 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp114_fu_472_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp114_reg_819 : STD_LOGIC_VECTOR (9 downto 0);
    signal hash_6_fu_481_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal hash_6_reg_824 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal hash_7_fu_553_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal hash_7_reg_839 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln41_fu_559_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln41_reg_844 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp210_fu_586_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp210_reg_854 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp86_fu_599_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp86_reg_859 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal temp_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_key_ce0 : STD_LOGIC;
    signal temp_key_we0 : STD_LOGIC;
    signal temp_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_key_ce1 : STD_LOGIC;
    signal empty_reg_310 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_i_phi_fu_325_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_cast6_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_1_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_fu_365_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln31_fu_374_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln31_fu_378_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal temp_key_load_7_cast_fu_397_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_key_load_1_cast_fu_393_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_key_load_9_cast_fu_418_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_key_load_3_cast_fu_415_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln38_fu_411_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln27_fu_407_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_key_load_8_cast_fu_437_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_key_load_2_cast_fu_434_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_key_load_10_cast_fu_451_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_key_load_4_cast_fu_447_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast4_fu_469_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp_key_load_15_cast_fu_465_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_1_fu_478_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln27_1_fu_461_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp_key_load_5_cast_fu_487_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_key_load_17_cast8_fu_494_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_498_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_key_load_11_cast_fu_490_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp58_fu_504_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_fu_518_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_cast5_fu_533_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp_key_load_14_cast_fu_529_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp142_fu_536_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp8_fu_542_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln38_2_fu_550_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp6_fu_510_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp12_cast_fu_525_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal temp_key_load_12_cast_fu_565_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_key_load_18_cast_fu_572_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_576_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_582_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast_fu_569_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast3_fu_596_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp_key_load_16_cast_fu_592_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp3_fu_609_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp9_fu_620_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_cast_fu_616_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln38_3_fu_605_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln41_2_fu_635_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln41_1_fu_641_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln41_fu_627_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln41_3_fu_645_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln41_2_fu_651_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln41_1_fu_630_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal hash_4_fu_655_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component encoding_hash_func_temp_key IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    temp_key_U : component encoding_hash_func_temp_key
    generic map (
        DataWidth => 8,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_key_address0,
        ce0 => temp_key_ce0,
        we0 => temp_key_we0,
        d0 => temp_key_d0,
        q0 => temp_key_q0,
        address1 => temp_key_address1,
        ce1 => temp_key_ce1,
        q1 => temp_key_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond3_fu_353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((exitcond3_fu_353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv14_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_return_preg <= hash_4_fu_655_p2;
                end if; 
            end if;
        end if;
    end process;


    empty_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_reg_310 <= empty_45_fu_342_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_reg_310 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_321 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_reg_685 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_321 <= i_2_reg_680;
            end if; 
        end if;
    end process;

    reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_333 <= temp_key_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_333 <= temp_key_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    add_ln41_reg_844(13 downto 3) <= add_ln41_fu_559_p2(13 downto 3);
                hash_7_reg_839 <= hash_7_fu_553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                empty_47_reg_754 <= empty_47_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                empty_48_reg_804 <= empty_48_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                empty_49_reg_769 <= empty_49_fu_422_p2;
                hash_5_reg_774 <= hash_5_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                empty_50_reg_789 <= empty_50_fu_441_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                hash_6_reg_824 <= hash_6_fu_481_p2;
                tmp114_reg_819 <= tmp114_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_2_reg_680 <= i_2_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln30_reg_685 <= icmp_ln30_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_338 <= temp_key_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                temp_key_load_1_reg_724 <= temp_key_q0;
                temp_key_load_4_reg_734 <= temp_key_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                temp_key_load_2_reg_714 <= temp_key_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp210_reg_854 <= tmp210_fu_586_p2;
                tmp86_reg_859 <= tmp86_fu_599_p2;
            end if;
        end if;
    end process;
    add_ln41_reg_844(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_353_p2, ap_enable_reg_pp0_iter0, icmp_ln30_fu_369_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln30_fu_369_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln30_fu_369_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_fu_378_p2 <= std_logic_vector(signed(sext_ln31_fu_374_p1) + signed(key_offset));
    add_ln41_1_fu_630_p2 <= std_logic_vector(unsigned(add_ln41_reg_844) + unsigned(tmp9_fu_620_p3));
    add_ln41_2_fu_635_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_616_p1) + unsigned(zext_ln38_3_fu_605_p1));
    add_ln41_3_fu_645_p2 <= std_logic_vector(unsigned(zext_ln41_1_fu_641_p1) + unsigned(zext_ln41_fu_627_p1));
    add_ln41_fu_559_p2 <= std_logic_vector(unsigned(tmp6_fu_510_p3) + unsigned(tmp12_cast_fu_525_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln30_fu_369_p2)
    begin
        if ((icmp_ln30_fu_369_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_325_p4_assign_proc : process(i_reg_321, i_2_reg_680, ap_CS_fsm_pp0_stage0, icmp_ln30_reg_685, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_reg_685 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_325_p4 <= i_2_reg_680;
        else 
            ap_phi_mux_i_phi_fu_325_p4 <= i_reg_321;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state16, hash_4_fu_655_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_return <= hash_4_fu_655_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    empty_45_fu_342_p2 <= std_logic_vector(unsigned(empty_reg_310) + unsigned(ap_const_lv5_1));
    empty_47_fu_401_p2 <= std_logic_vector(unsigned(temp_key_load_7_cast_fu_397_p1) + unsigned(temp_key_load_1_cast_fu_393_p1));
    empty_48_fu_455_p2 <= std_logic_vector(unsigned(temp_key_load_10_cast_fu_451_p1) + unsigned(temp_key_load_4_cast_fu_447_p1));
    empty_49_fu_422_p2 <= std_logic_vector(unsigned(temp_key_load_9_cast_fu_418_p1) + unsigned(temp_key_load_3_cast_fu_415_p1));
    empty_50_fu_441_p2 <= std_logic_vector(unsigned(temp_key_load_8_cast_fu_437_p1) + unsigned(temp_key_load_2_cast_fu_434_p1));
    exitcond3_fu_353_p2 <= "1" when (empty_reg_310 = ap_const_lv5_14) else "0";
    hash_4_fu_655_p2 <= std_logic_vector(unsigned(zext_ln41_2_fu_651_p1) + unsigned(add_ln41_1_fu_630_p2));
    hash_5_fu_428_p2 <= std_logic_vector(unsigned(zext_ln38_fu_411_p1) + unsigned(zext_ln27_fu_407_p1));
    hash_6_fu_481_p2 <= std_logic_vector(unsigned(zext_ln38_1_fu_478_p1) + unsigned(zext_ln27_1_fu_461_p1));
    hash_7_fu_553_p2 <= std_logic_vector(unsigned(tmp8_fu_542_p3) + unsigned(zext_ln38_2_fu_550_p1));
    i_2_fu_359_p2 <= std_logic_vector(signed(ap_phi_mux_i_phi_fu_325_p4) + signed(ap_const_lv8_1));
    icmp_ln30_fu_369_p2 <= "1" when (signed(sext_ln30_fu_365_p1) < signed(len)) else "0";
    key_address0 <= zext_ln31_1_fu_383_p1(13 - 1 downto 0);

    key_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast3_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_48_reg_804),10));
    p_cast4_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_49_reg_769),10));
    p_cast5_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_50_reg_789),10));
    p_cast6_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_310),64));
    p_cast_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_47_reg_754),10));
        sext_ln30_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_i_phi_fu_325_p4),18));

        sext_ln31_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_i_phi_fu_325_p4),13));


    temp_key_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, p_cast6_fu_348_p1, zext_ln31_fu_388_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_key_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_key_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_key_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_key_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_key_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_key_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_key_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_key_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_key_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_key_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            temp_key_address0 <= zext_ln31_fu_388_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_key_address0 <= p_cast6_fu_348_p1(5 - 1 downto 0);
        else 
            temp_key_address0 <= "XXXXX";
        end if; 
    end process;


    temp_key_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_key_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_key_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_key_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_key_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_key_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_key_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_key_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_key_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_key_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_key_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            temp_key_address1 <= "XXXXX";
        end if; 
    end process;


    temp_key_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            temp_key_ce0 <= ap_const_logic_1;
        else 
            temp_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_key_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            temp_key_ce1 <= ap_const_logic_1;
        else 
            temp_key_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_key_d0_assign_proc : process(key_q0, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            temp_key_d0 <= key_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_key_d0 <= ap_const_lv8_0;
        else 
            temp_key_d0 <= "XXXXXXXX";
        end if; 
    end process;

    temp_key_load_10_cast_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_q0),9));
    temp_key_load_11_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_338),9));
    temp_key_load_12_cast_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_333),9));
    temp_key_load_14_cast_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_q0),10));
    temp_key_load_15_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_q1),10));
    temp_key_load_16_cast_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_q0),10));
    temp_key_load_17_cast8_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_q1),9));
    temp_key_load_18_cast_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_q1),9));
    temp_key_load_1_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_333),9));
    temp_key_load_2_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_load_1_reg_724),9));
    temp_key_load_3_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_load_2_reg_714),9));
    temp_key_load_4_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_333),9));
    temp_key_load_5_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_load_4_reg_734),9));
    temp_key_load_7_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_q1),9));
    temp_key_load_8_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_q0),9));
    temp_key_load_9_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_q1),9));

    temp_key_we0_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_353_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln30_reg_685, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_reg_685 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((exitcond3_fu_353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            temp_key_we0 <= ap_const_logic_1;
        else 
            temp_key_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp114_fu_472_p2 <= std_logic_vector(unsigned(p_cast4_fu_469_p1) + unsigned(temp_key_load_15_cast_fu_465_p1));
    tmp12_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_518_p3),14));
    tmp142_fu_536_p2 <= std_logic_vector(unsigned(p_cast5_fu_533_p1) + unsigned(temp_key_load_14_cast_fu_529_p1));
    tmp1_fu_498_p2 <= std_logic_vector(unsigned(temp_key_load_5_cast_fu_487_p1) + unsigned(temp_key_load_17_cast8_fu_494_p1));
    tmp210_fu_586_p2 <= std_logic_vector(unsigned(tmp_cast_fu_582_p1) + unsigned(p_cast_fu_569_p1));
    tmp3_cast_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_609_p3),12));
    tmp3_fu_609_p3 <= (tmp210_reg_854 & ap_const_lv1_0);
    tmp58_fu_504_p2 <= std_logic_vector(unsigned(tmp1_fu_498_p2) + unsigned(temp_key_load_11_cast_fu_490_p1));
    tmp6_fu_510_p3 <= (tmp58_fu_504_p2 & ap_const_lv5_0);
    tmp7_fu_518_p3 <= (tmp114_reg_819 & ap_const_lv3_0);
    tmp86_fu_599_p2 <= std_logic_vector(unsigned(p_cast3_fu_596_p1) + unsigned(temp_key_load_16_cast_fu_592_p1));
    tmp8_fu_542_p3 <= (tmp142_fu_536_p2 & ap_const_lv2_0);
    tmp9_fu_620_p3 <= (tmp86_reg_859 & ap_const_lv4_0);
    tmp_cast_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_576_p2),10));
    tmp_fu_576_p2 <= std_logic_vector(unsigned(temp_key_load_12_cast_fu_565_p1) + unsigned(temp_key_load_18_cast_fu_572_p1));
    zext_ln27_1_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_q0),10));
    zext_ln27_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_338),9));
    zext_ln31_1_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_378_p2),64));
    zext_ln31_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_321),64));
    zext_ln38_1_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hash_5_reg_774),10));
    zext_ln38_2_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hash_6_reg_824),12));
    zext_ln38_3_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_q1),12));
    zext_ln38_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_key_q0),9));
    zext_ln41_1_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_2_fu_635_p2),13));
    zext_ln41_2_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_3_fu_645_p2),14));
    zext_ln41_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hash_7_reg_839),13));
end behav;
