// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module encoding_load6 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_p0_AWVALID,
        m_axi_p0_AWREADY,
        m_axi_p0_AWADDR,
        m_axi_p0_AWID,
        m_axi_p0_AWLEN,
        m_axi_p0_AWSIZE,
        m_axi_p0_AWBURST,
        m_axi_p0_AWLOCK,
        m_axi_p0_AWCACHE,
        m_axi_p0_AWPROT,
        m_axi_p0_AWQOS,
        m_axi_p0_AWREGION,
        m_axi_p0_AWUSER,
        m_axi_p0_WVALID,
        m_axi_p0_WREADY,
        m_axi_p0_WDATA,
        m_axi_p0_WSTRB,
        m_axi_p0_WLAST,
        m_axi_p0_WID,
        m_axi_p0_WUSER,
        m_axi_p0_ARVALID,
        m_axi_p0_ARREADY,
        m_axi_p0_ARADDR,
        m_axi_p0_ARID,
        m_axi_p0_ARLEN,
        m_axi_p0_ARSIZE,
        m_axi_p0_ARBURST,
        m_axi_p0_ARLOCK,
        m_axi_p0_ARCACHE,
        m_axi_p0_ARPROT,
        m_axi_p0_ARQOS,
        m_axi_p0_ARREGION,
        m_axi_p0_ARUSER,
        m_axi_p0_RVALID,
        m_axi_p0_RREADY,
        m_axi_p0_RDATA,
        m_axi_p0_RLAST,
        m_axi_p0_RID,
        m_axi_p0_RUSER,
        m_axi_p0_RRESP,
        m_axi_p0_BVALID,
        m_axi_p0_BREADY,
        m_axi_p0_BRESP,
        m_axi_p0_BID,
        m_axi_p0_BUSER,
        instream_din,
        instream_full_n,
        instream_write,
        m_axi_p1_AWVALID,
        m_axi_p1_AWREADY,
        m_axi_p1_AWADDR,
        m_axi_p1_AWID,
        m_axi_p1_AWLEN,
        m_axi_p1_AWSIZE,
        m_axi_p1_AWBURST,
        m_axi_p1_AWLOCK,
        m_axi_p1_AWCACHE,
        m_axi_p1_AWPROT,
        m_axi_p1_AWQOS,
        m_axi_p1_AWREGION,
        m_axi_p1_AWUSER,
        m_axi_p1_WVALID,
        m_axi_p1_WREADY,
        m_axi_p1_WDATA,
        m_axi_p1_WSTRB,
        m_axi_p1_WLAST,
        m_axi_p1_WID,
        m_axi_p1_WUSER,
        m_axi_p1_ARVALID,
        m_axi_p1_ARREADY,
        m_axi_p1_ARADDR,
        m_axi_p1_ARID,
        m_axi_p1_ARLEN,
        m_axi_p1_ARSIZE,
        m_axi_p1_ARBURST,
        m_axi_p1_ARLOCK,
        m_axi_p1_ARCACHE,
        m_axi_p1_ARPROT,
        m_axi_p1_ARQOS,
        m_axi_p1_ARREGION,
        m_axi_p1_ARUSER,
        m_axi_p1_RVALID,
        m_axi_p1_RREADY,
        m_axi_p1_RDATA,
        m_axi_p1_RLAST,
        m_axi_p1_RID,
        m_axi_p1_RUSER,
        m_axi_p1_RRESP,
        m_axi_p1_BVALID,
        m_axi_p1_BREADY,
        m_axi_p1_BRESP,
        m_axi_p1_BID,
        m_axi_p1_BUSER,
        inlen_stream_din,
        inlen_stream_full_n,
        inlen_stream_write,
        input_r,
        len,
        output_compress,
        output_length,
        output_compress_out_din,
        output_compress_out_full_n,
        output_compress_out_write,
        output_length_out_din,
        output_length_out_full_n,
        output_length_out_write
);

parameter    ap_ST_fsm_state1 = 144'd1;
parameter    ap_ST_fsm_state2 = 144'd2;
parameter    ap_ST_fsm_state3 = 144'd4;
parameter    ap_ST_fsm_state4 = 144'd8;
parameter    ap_ST_fsm_state5 = 144'd16;
parameter    ap_ST_fsm_state6 = 144'd32;
parameter    ap_ST_fsm_state7 = 144'd64;
parameter    ap_ST_fsm_state8 = 144'd128;
parameter    ap_ST_fsm_state9 = 144'd256;
parameter    ap_ST_fsm_state10 = 144'd512;
parameter    ap_ST_fsm_state11 = 144'd1024;
parameter    ap_ST_fsm_state12 = 144'd2048;
parameter    ap_ST_fsm_state13 = 144'd4096;
parameter    ap_ST_fsm_state14 = 144'd8192;
parameter    ap_ST_fsm_state15 = 144'd16384;
parameter    ap_ST_fsm_state16 = 144'd32768;
parameter    ap_ST_fsm_state17 = 144'd65536;
parameter    ap_ST_fsm_state18 = 144'd131072;
parameter    ap_ST_fsm_state19 = 144'd262144;
parameter    ap_ST_fsm_state20 = 144'd524288;
parameter    ap_ST_fsm_state21 = 144'd1048576;
parameter    ap_ST_fsm_state22 = 144'd2097152;
parameter    ap_ST_fsm_state23 = 144'd4194304;
parameter    ap_ST_fsm_state24 = 144'd8388608;
parameter    ap_ST_fsm_state25 = 144'd16777216;
parameter    ap_ST_fsm_state26 = 144'd33554432;
parameter    ap_ST_fsm_state27 = 144'd67108864;
parameter    ap_ST_fsm_state28 = 144'd134217728;
parameter    ap_ST_fsm_state29 = 144'd268435456;
parameter    ap_ST_fsm_state30 = 144'd536870912;
parameter    ap_ST_fsm_state31 = 144'd1073741824;
parameter    ap_ST_fsm_state32 = 144'd2147483648;
parameter    ap_ST_fsm_state33 = 144'd4294967296;
parameter    ap_ST_fsm_state34 = 144'd8589934592;
parameter    ap_ST_fsm_state35 = 144'd17179869184;
parameter    ap_ST_fsm_state36 = 144'd34359738368;
parameter    ap_ST_fsm_state37 = 144'd68719476736;
parameter    ap_ST_fsm_state38 = 144'd137438953472;
parameter    ap_ST_fsm_state39 = 144'd274877906944;
parameter    ap_ST_fsm_state40 = 144'd549755813888;
parameter    ap_ST_fsm_state41 = 144'd1099511627776;
parameter    ap_ST_fsm_state42 = 144'd2199023255552;
parameter    ap_ST_fsm_state43 = 144'd4398046511104;
parameter    ap_ST_fsm_state44 = 144'd8796093022208;
parameter    ap_ST_fsm_state45 = 144'd17592186044416;
parameter    ap_ST_fsm_state46 = 144'd35184372088832;
parameter    ap_ST_fsm_state47 = 144'd70368744177664;
parameter    ap_ST_fsm_state48 = 144'd140737488355328;
parameter    ap_ST_fsm_state49 = 144'd281474976710656;
parameter    ap_ST_fsm_state50 = 144'd562949953421312;
parameter    ap_ST_fsm_state51 = 144'd1125899906842624;
parameter    ap_ST_fsm_state52 = 144'd2251799813685248;
parameter    ap_ST_fsm_state53 = 144'd4503599627370496;
parameter    ap_ST_fsm_state54 = 144'd9007199254740992;
parameter    ap_ST_fsm_state55 = 144'd18014398509481984;
parameter    ap_ST_fsm_state56 = 144'd36028797018963968;
parameter    ap_ST_fsm_state57 = 144'd72057594037927936;
parameter    ap_ST_fsm_state58 = 144'd144115188075855872;
parameter    ap_ST_fsm_state59 = 144'd288230376151711744;
parameter    ap_ST_fsm_state60 = 144'd576460752303423488;
parameter    ap_ST_fsm_state61 = 144'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 144'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 144'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 144'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 144'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 144'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 144'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 144'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 144'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 144'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 144'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 144'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 144'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 144'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 144'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 144'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 144'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 144'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 144'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 144'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 144'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 144'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 144'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 144'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 144'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 144'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 144'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 144'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 144'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 144'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 144'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 144'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 144'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 144'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 144'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 144'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 144'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 144'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 144'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 144'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 144'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 144'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 144'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 144'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 144'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 144'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 144'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 144'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 144'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 144'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 144'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 144'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 144'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 144'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 144'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 144'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 144'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 144'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 144'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 144'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 144'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 144'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 144'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 144'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 144'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 144'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 144'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 144'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 144'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 144'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 144'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 144'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 144'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 144'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 144'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 144'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 144'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 144'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 144'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 144'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 144'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 144'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_pp0_stage0 = 144'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state146 = 144'd11150372599265311570767859136324180752990208;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_p0_AWVALID;
input   m_axi_p0_AWREADY;
output  [63:0] m_axi_p0_AWADDR;
output  [0:0] m_axi_p0_AWID;
output  [31:0] m_axi_p0_AWLEN;
output  [2:0] m_axi_p0_AWSIZE;
output  [1:0] m_axi_p0_AWBURST;
output  [1:0] m_axi_p0_AWLOCK;
output  [3:0] m_axi_p0_AWCACHE;
output  [2:0] m_axi_p0_AWPROT;
output  [3:0] m_axi_p0_AWQOS;
output  [3:0] m_axi_p0_AWREGION;
output  [0:0] m_axi_p0_AWUSER;
output   m_axi_p0_WVALID;
input   m_axi_p0_WREADY;
output  [7:0] m_axi_p0_WDATA;
output  [0:0] m_axi_p0_WSTRB;
output   m_axi_p0_WLAST;
output  [0:0] m_axi_p0_WID;
output  [0:0] m_axi_p0_WUSER;
output   m_axi_p0_ARVALID;
input   m_axi_p0_ARREADY;
output  [63:0] m_axi_p0_ARADDR;
output  [0:0] m_axi_p0_ARID;
output  [31:0] m_axi_p0_ARLEN;
output  [2:0] m_axi_p0_ARSIZE;
output  [1:0] m_axi_p0_ARBURST;
output  [1:0] m_axi_p0_ARLOCK;
output  [3:0] m_axi_p0_ARCACHE;
output  [2:0] m_axi_p0_ARPROT;
output  [3:0] m_axi_p0_ARQOS;
output  [3:0] m_axi_p0_ARREGION;
output  [0:0] m_axi_p0_ARUSER;
input   m_axi_p0_RVALID;
output   m_axi_p0_RREADY;
input  [7:0] m_axi_p0_RDATA;
input   m_axi_p0_RLAST;
input  [0:0] m_axi_p0_RID;
input  [0:0] m_axi_p0_RUSER;
input  [1:0] m_axi_p0_RRESP;
input   m_axi_p0_BVALID;
output   m_axi_p0_BREADY;
input  [1:0] m_axi_p0_BRESP;
input  [0:0] m_axi_p0_BID;
input  [0:0] m_axi_p0_BUSER;
output  [7:0] instream_din;
input   instream_full_n;
output   instream_write;
output   m_axi_p1_AWVALID;
input   m_axi_p1_AWREADY;
output  [63:0] m_axi_p1_AWADDR;
output  [0:0] m_axi_p1_AWID;
output  [31:0] m_axi_p1_AWLEN;
output  [2:0] m_axi_p1_AWSIZE;
output  [1:0] m_axi_p1_AWBURST;
output  [1:0] m_axi_p1_AWLOCK;
output  [3:0] m_axi_p1_AWCACHE;
output  [2:0] m_axi_p1_AWPROT;
output  [3:0] m_axi_p1_AWQOS;
output  [3:0] m_axi_p1_AWREGION;
output  [0:0] m_axi_p1_AWUSER;
output   m_axi_p1_WVALID;
input   m_axi_p1_WREADY;
output  [31:0] m_axi_p1_WDATA;
output  [3:0] m_axi_p1_WSTRB;
output   m_axi_p1_WLAST;
output  [0:0] m_axi_p1_WID;
output  [0:0] m_axi_p1_WUSER;
output   m_axi_p1_ARVALID;
input   m_axi_p1_ARREADY;
output  [63:0] m_axi_p1_ARADDR;
output  [0:0] m_axi_p1_ARID;
output  [31:0] m_axi_p1_ARLEN;
output  [2:0] m_axi_p1_ARSIZE;
output  [1:0] m_axi_p1_ARBURST;
output  [1:0] m_axi_p1_ARLOCK;
output  [3:0] m_axi_p1_ARCACHE;
output  [2:0] m_axi_p1_ARPROT;
output  [3:0] m_axi_p1_ARQOS;
output  [3:0] m_axi_p1_ARREGION;
output  [0:0] m_axi_p1_ARUSER;
input   m_axi_p1_RVALID;
output   m_axi_p1_RREADY;
input  [31:0] m_axi_p1_RDATA;
input   m_axi_p1_RLAST;
input  [0:0] m_axi_p1_RID;
input  [0:0] m_axi_p1_RUSER;
input  [1:0] m_axi_p1_RRESP;
input   m_axi_p1_BVALID;
output   m_axi_p1_BREADY;
input  [1:0] m_axi_p1_BRESP;
input  [0:0] m_axi_p1_BID;
input  [0:0] m_axi_p1_BUSER;
output  [31:0] inlen_stream_din;
input   inlen_stream_full_n;
output   inlen_stream_write;
input  [63:0] input_r;
input  [63:0] len;
input  [63:0] output_compress;
input  [63:0] output_length;
output  [63:0] output_compress_out_din;
input   output_compress_out_full_n;
output   output_compress_out_write;
output  [63:0] output_length_out_din;
input   output_length_out_full_n;
output   output_length_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_p0_ARVALID;
reg m_axi_p0_RREADY;
reg instream_write;
reg m_axi_p1_ARVALID;
reg m_axi_p1_RREADY;
reg inlen_stream_write;
reg output_compress_out_write;
reg output_length_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [143:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p0_blk_n_AR;
wire    ap_CS_fsm_state73;
reg   [0:0] icmp_ln205_reg_241;
reg    p0_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln205_1_reg_261;
reg    instream_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln205_1_reg_261_pp0_iter1_reg;
reg    p1_blk_n_AR;
reg    p1_blk_n_R;
wire    ap_CS_fsm_state71;
reg    inlen_stream_blk_n;
wire    ap_CS_fsm_state146;
reg    output_compress_out_blk_n;
reg    output_length_out_blk_n;
reg   [30:0] X_reg_169;
reg   [31:0] p1_addr_read_reg_233;
wire   [0:0] icmp_ln205_fu_201_p2;
wire    ap_CS_fsm_state72;
wire   [30:0] trunc_ln205_fu_213_p1;
reg   [30:0] trunc_ln205_reg_251;
wire    ap_CS_fsm_state142;
wire   [30:0] add_ln205_fu_216_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state143_pp0_stage0_iter0;
reg    ap_block_state144_pp0_stage0_iter1;
reg    ap_block_state145_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln205_1_fu_222_p2;
reg   [7:0] p0_addr_read_reg_265;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state143;
wire  signed [63:0] p_cast_cast_i_i_fu_190_p1;
reg    ap_block_state1;
reg    ap_block_state73_io;
reg    ap_block_pp0_stage0_01001;
wire   [61:0] p_cast_i_i_fu_180_p4;
reg   [143:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 144'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((inlen_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state146))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state143) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state142)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state143)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state143);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state142)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        X_reg_169 <= 31'd0;
    end else if (((icmp_ln205_1_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_reg_169 <= add_ln205_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln205_1_reg_261 <= icmp_ln205_1_fu_222_p2;
        icmp_ln205_1_reg_261_pp0_iter1_reg <= icmp_ln205_1_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        icmp_ln205_reg_241 <= icmp_ln205_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln205_1_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p0_addr_read_reg_265 <= m_axi_p0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        p1_addr_read_reg_233 <= m_axi_p1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        trunc_ln205_reg_251 <= trunc_ln205_fu_213_p1;
    end
end

always @ (*) begin
    if ((icmp_ln205_1_fu_222_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state143 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state143 = 1'b0;
    end
end

always @ (*) begin
    if (((inlen_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state146))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        inlen_stream_blk_n = inlen_stream_full_n;
    end else begin
        inlen_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((inlen_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state146))) begin
        inlen_stream_write = 1'b1;
    end else begin
        inlen_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln205_1_reg_261_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        instream_blk_n = instream_full_n;
    end else begin
        instream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln205_1_reg_261_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        instream_write = 1'b1;
    end else begin
        instream_write = 1'b0;
    end
end

always @ (*) begin
    if (((inlen_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state146))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state73_io) & (icmp_ln205_reg_241 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
        m_axi_p0_ARVALID = 1'b1;
    end else begin
        m_axi_p0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln205_1_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_p0_RREADY = 1'b1;
    end else begin
        m_axi_p0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_length_out_full_n == 1'b0) | (output_compress_out_full_n == 1'b0) | (m_axi_p1_ARREADY == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_p1_ARVALID = 1'b1;
    end else begin
        m_axi_p1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_p1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
        m_axi_p1_RREADY = 1'b1;
    end else begin
        m_axi_p1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_compress_out_blk_n = output_compress_out_full_n;
    end else begin
        output_compress_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_length_out_full_n == 1'b0) | (output_compress_out_full_n == 1'b0) | (m_axi_p1_ARREADY == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_compress_out_write = 1'b1;
    end else begin
        output_compress_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_length_out_blk_n = output_length_out_full_n;
    end else begin
        output_length_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_length_out_full_n == 1'b0) | (output_compress_out_full_n == 1'b0) | (m_axi_p1_ARREADY == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_length_out_write = 1'b1;
    end else begin
        output_length_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln205_reg_241 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
        p0_blk_n_AR = m_axi_p0_ARREADY;
    end else begin
        p0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln205_1_reg_261 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p0_blk_n_R = m_axi_p0_RVALID;
    end else begin
        p0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p1_blk_n_AR = m_axi_p1_ARREADY;
    end else begin
        p1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        p1_blk_n_R = m_axi_p1_RVALID;
    end else begin
        p1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((output_length_out_full_n == 1'b0) | (output_compress_out_full_n == 1'b0) | (m_axi_p1_ARREADY == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((m_axi_p1_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((1'b0 == ap_block_state73_io) & (icmp_ln205_reg_241 == 1'd0) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end else if (((1'b0 == ap_block_state73_io) & (icmp_ln205_reg_241 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln205_1_fu_222_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln205_1_fu_222_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state146 : begin
            if (((inlen_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state146))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln205_fu_216_p2 = (X_reg_169 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln205_1_reg_261_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (instream_full_n == 1'b0)) | ((icmp_ln205_1_reg_261 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_p0_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln205_1_reg_261_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (instream_full_n == 1'b0)) | ((icmp_ln205_1_reg_261 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_p0_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln205_1_reg_261_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (instream_full_n == 1'b0)) | ((icmp_ln205_1_reg_261 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_p0_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((output_length_out_full_n == 1'b0) | (output_compress_out_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state143_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state144_pp0_stage0_iter1 = ((icmp_ln205_1_reg_261 == 1'd0) & (m_axi_p0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state145_pp0_stage0_iter2 = ((icmp_ln205_1_reg_261_pp0_iter1_reg == 1'd0) & (instream_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state73_io = ((icmp_ln205_reg_241 == 1'd1) & (m_axi_p0_ARREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln205_1_fu_222_p2 = ((X_reg_169 == trunc_ln205_reg_251) ? 1'b1 : 1'b0);

assign icmp_ln205_fu_201_p2 = (($signed(p1_addr_read_reg_233) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign inlen_stream_din = p1_addr_read_reg_233;

assign instream_din = p0_addr_read_reg_265;

assign m_axi_p0_ARADDR = input_r;

assign m_axi_p0_ARBURST = 2'd0;

assign m_axi_p0_ARCACHE = 4'd0;

assign m_axi_p0_ARID = 1'd0;

assign m_axi_p0_ARLEN = p1_addr_read_reg_233;

assign m_axi_p0_ARLOCK = 2'd0;

assign m_axi_p0_ARPROT = 3'd0;

assign m_axi_p0_ARQOS = 4'd0;

assign m_axi_p0_ARREGION = 4'd0;

assign m_axi_p0_ARSIZE = 3'd0;

assign m_axi_p0_ARUSER = 1'd0;

assign m_axi_p0_AWADDR = 64'd0;

assign m_axi_p0_AWBURST = 2'd0;

assign m_axi_p0_AWCACHE = 4'd0;

assign m_axi_p0_AWID = 1'd0;

assign m_axi_p0_AWLEN = 32'd0;

assign m_axi_p0_AWLOCK = 2'd0;

assign m_axi_p0_AWPROT = 3'd0;

assign m_axi_p0_AWQOS = 4'd0;

assign m_axi_p0_AWREGION = 4'd0;

assign m_axi_p0_AWSIZE = 3'd0;

assign m_axi_p0_AWUSER = 1'd0;

assign m_axi_p0_AWVALID = 1'b0;

assign m_axi_p0_BREADY = 1'b0;

assign m_axi_p0_WDATA = 8'd0;

assign m_axi_p0_WID = 1'd0;

assign m_axi_p0_WLAST = 1'b0;

assign m_axi_p0_WSTRB = 1'd0;

assign m_axi_p0_WUSER = 1'd0;

assign m_axi_p0_WVALID = 1'b0;

assign m_axi_p1_ARADDR = p_cast_cast_i_i_fu_190_p1;

assign m_axi_p1_ARBURST = 2'd0;

assign m_axi_p1_ARCACHE = 4'd0;

assign m_axi_p1_ARID = 1'd0;

assign m_axi_p1_ARLEN = 32'd1;

assign m_axi_p1_ARLOCK = 2'd0;

assign m_axi_p1_ARPROT = 3'd0;

assign m_axi_p1_ARQOS = 4'd0;

assign m_axi_p1_ARREGION = 4'd0;

assign m_axi_p1_ARSIZE = 3'd0;

assign m_axi_p1_ARUSER = 1'd0;

assign m_axi_p1_AWADDR = 64'd0;

assign m_axi_p1_AWBURST = 2'd0;

assign m_axi_p1_AWCACHE = 4'd0;

assign m_axi_p1_AWID = 1'd0;

assign m_axi_p1_AWLEN = 32'd0;

assign m_axi_p1_AWLOCK = 2'd0;

assign m_axi_p1_AWPROT = 3'd0;

assign m_axi_p1_AWQOS = 4'd0;

assign m_axi_p1_AWREGION = 4'd0;

assign m_axi_p1_AWSIZE = 3'd0;

assign m_axi_p1_AWUSER = 1'd0;

assign m_axi_p1_AWVALID = 1'b0;

assign m_axi_p1_BREADY = 1'b0;

assign m_axi_p1_WDATA = 32'd0;

assign m_axi_p1_WID = 1'd0;

assign m_axi_p1_WLAST = 1'b0;

assign m_axi_p1_WSTRB = 4'd0;

assign m_axi_p1_WUSER = 1'd0;

assign m_axi_p1_WVALID = 1'b0;

assign output_compress_out_din = output_compress;

assign output_length_out_din = output_length;

assign p_cast_cast_i_i_fu_190_p1 = $signed(p_cast_i_i_fu_180_p4);

assign p_cast_i_i_fu_180_p4 = {{len[63:2]}};

assign start_out = real_start;

assign trunc_ln205_fu_213_p1 = p1_addr_read_reg_233[30:0];

endmodule //encoding_load6
