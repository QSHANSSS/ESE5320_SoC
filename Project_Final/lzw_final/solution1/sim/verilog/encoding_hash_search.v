// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module encoding_hash_search (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key_address0,
        key_ce0,
        key_q0,
        key_address1,
        key_ce1,
        key_q1,
        hashArr_location_address0,
        hashArr_location_ce0,
        hashArr_location_q0,
        hashArr_start_address0,
        hashArr_start_ce0,
        hashArr_start_q0,
        hashArr_start_address1,
        hashArr_start_ce1,
        hashArr_start_q1,
        hashArr_empty_flag_address0,
        hashArr_empty_flag_ce0,
        hashArr_empty_flag_q0,
        hashArr_empty_flag_address1,
        hashArr_empty_flag_ce1,
        hashArr_empty_flag_q1,
        key_offset,
        hash,
        len,
        ap_return
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_pp0_stage0 = 17'd4096;
parameter    ap_ST_fsm_state15 = 17'd8192;
parameter    ap_ST_fsm_state16 = 17'd16384;
parameter    ap_ST_fsm_state17 = 17'd32768;
parameter    ap_ST_fsm_state18 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;
output  [12:0] key_address1;
output   key_ce1;
input  [7:0] key_q1;
output  [17:0] hashArr_location_address0;
output   hashArr_location_ce0;
input  [15:0] hashArr_location_q0;
output  [17:0] hashArr_start_address0;
output   hashArr_start_ce0;
input  [15:0] hashArr_start_q0;
output  [17:0] hashArr_start_address1;
output   hashArr_start_ce1;
input  [15:0] hashArr_start_q1;
output  [17:0] hashArr_empty_flag_address0;
output   hashArr_empty_flag_ce0;
input  [0:0] hashArr_empty_flag_q0;
output  [17:0] hashArr_empty_flag_address1;
output   hashArr_empty_flag_ce1;
input  [0:0] hashArr_empty_flag_q1;
input  [12:0] key_offset;
input  [13:0] hash;
input  [17:0] len;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg key_ce0;
reg key_ce1;
reg[17:0] hashArr_location_address0;
reg hashArr_location_ce0;
reg[17:0] hashArr_start_address0;
reg hashArr_start_ce0;
reg[17:0] hashArr_start_address1;
reg hashArr_start_ce1;
reg[17:0] hashArr_empty_flag_address0;
reg hashArr_empty_flag_ce0;
reg[17:0] hashArr_empty_flag_address1;
reg hashArr_empty_flag_ce1;
reg[15:0] ap_return;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [32:0] indvars_iv_reg_717;
reg  signed [7:0] k_reg_727;
reg   [7:0] match_reg_738;
wire   [3:0] empty_38_fu_776_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] empty_41_fu_793_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln79_fu_810_p2;
reg   [0:0] icmp_ln79_reg_1220;
wire   [0:0] exitcond6_fu_804_p2;
wire   [17:0] sub_ln81_fu_833_p2;
reg   [17:0] sub_ln81_reg_1224;
reg   [17:0] hashArr_start_addr_2_reg_1244;
reg   [17:0] hashArr_start_addr_3_reg_1249;
reg   [17:0] hashArr_start_addr_4_reg_1254;
reg   [17:0] hashArr_start_addr_5_reg_1259;
reg   [17:0] hashArr_start_addr_6_reg_1264;
reg   [17:0] hashArr_start_addr_7_reg_1269;
reg   [17:0] hashArr_start_addr_8_reg_1274;
reg   [17:0] hashArr_start_addr_9_reg_1279;
reg   [17:0] hashArr_start_addr_10_reg_1284;
reg   [17:0] hashArr_start_addr_11_reg_1289;
reg   [17:0] hashArr_start_addr_12_reg_1294;
reg   [17:0] hashArr_start_addr_13_reg_1299;
reg   [17:0] hashArr_empty_flag_addr_2_reg_1314;
reg   [17:0] hashArr_empty_flag_addr_3_reg_1319;
reg   [17:0] hashArr_empty_flag_addr_4_reg_1324;
reg   [17:0] hashArr_empty_flag_addr_5_reg_1329;
reg   [17:0] hashArr_empty_flag_addr_6_reg_1334;
reg   [17:0] hashArr_empty_flag_addr_7_reg_1339;
reg   [17:0] hashArr_empty_flag_addr_8_reg_1344;
reg   [17:0] hashArr_empty_flag_addr_9_reg_1349;
reg   [17:0] hashArr_empty_flag_addr_10_reg_1354;
reg   [17:0] hashArr_empty_flag_addr_11_reg_1359;
reg   [17:0] hashArr_empty_flag_addr_12_reg_1364;
reg   [17:0] hashArr_empty_flag_addr_13_reg_1369;
wire   [0:0] icmp_ln95_fu_1072_p2;
reg   [0:0] icmp_ln95_reg_1374;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln91_fu_1077_p1;
reg   [63:0] zext_ln91_reg_1378;
wire    ap_CS_fsm_state11;
wire   [17:0] zext_ln91_1_fu_1082_p1;
reg   [17:0] zext_ln91_1_reg_1383;
wire   [0:0] icmp_ln91_fu_1086_p2;
reg   [0:0] icmp_ln91_reg_1388;
wire   [3:0] add_ln91_fu_1092_p2;
reg   [3:0] add_ln91_reg_1392;
reg   [3:0] temp_addr_15_reg_1397;
wire  signed [32:0] sext_ln95_fu_1098_p1;
wire    ap_CS_fsm_state12;
wire   [7:0] k_1_fu_1102_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state13_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln95_1_fu_1112_p2;
reg   [0:0] icmp_ln95_1_reg_1413;
wire   [32:0] add_ln98_fu_1122_p2;
reg   [32:0] add_ln98_reg_1417;
wire   [7:0] match_1_fu_1154_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] icmp_ln104_fu_1171_p2;
reg   [0:0] icmp_ln104_reg_1437;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire   [0:0] flag_q1;
wire    ap_CS_fsm_state18;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state13;
reg   [3:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
reg   [31:0] temp_d0;
reg   [3:0] temp_address1;
reg    temp_ce1;
reg    temp_we1;
reg   [31:0] temp_d1;
wire   [31:0] temp_q1;
reg   [3:0] flag_address0;
reg    flag_ce0;
reg    flag_we0;
reg   [0:0] flag_d0;
reg   [3:0] flag_address1;
reg    flag_ce1;
reg    flag_we1;
reg   [0:0] flag_d1;
reg   [3:0] empty_reg_684;
wire   [0:0] exitcond167_fu_787_p2;
reg   [3:0] empty_40_reg_695;
reg   [3:0] j_reg_706;
reg   [32:0] ap_phi_mux_indvars_iv_phi_fu_720_p4;
wire    ap_block_pp0_stage0;
reg   [7:0] ap_phi_mux_match_0_lcssa_phi_fu_754_p4;
reg   [7:0] match_0_lcssa_reg_750;
reg   [15:0] ap_phi_mux_retval_0_phi_fu_766_p6;
reg   [15:0] retval_0_reg_762;
wire    ap_CS_fsm_state17;
wire   [63:0] p_cast_fu_782_p1;
wire   [63:0] p_cast2_fu_799_p1;
wire   [63:0] zext_ln81_1_fu_839_p1;
wire   [63:0] zext_ln86_fu_852_p1;
wire   [63:0] zext_ln86_1_fu_864_p1;
wire   [63:0] zext_ln86_2_fu_876_p1;
wire   [63:0] zext_ln86_3_fu_888_p1;
wire   [63:0] zext_ln86_4_fu_900_p1;
wire   [63:0] zext_ln86_5_fu_912_p1;
wire   [63:0] zext_ln86_6_fu_924_p1;
wire   [63:0] zext_ln86_7_fu_936_p1;
wire   [63:0] zext_ln86_8_fu_948_p1;
wire   [63:0] zext_ln86_9_fu_960_p1;
wire   [63:0] zext_ln86_10_fu_972_p1;
wire   [63:0] zext_ln86_11_fu_984_p1;
wire   [63:0] zext_ln86_12_fu_996_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [63:0] indvars_iv_cast_fu_1117_p1;
wire   [63:0] zext_ln98_fu_1137_p1;
wire   [63:0] zext_ln106_fu_1180_p1;
wire  signed [31:0] sext_ln86_fu_1002_p1;
wire  signed [31:0] sext_ln86_1_fu_1007_p1;
wire  signed [31:0] sext_ln86_2_fu_1012_p1;
wire  signed [31:0] sext_ln86_3_fu_1017_p1;
wire  signed [31:0] sext_ln86_4_fu_1022_p1;
wire  signed [31:0] sext_ln86_5_fu_1027_p1;
wire  signed [31:0] sext_ln86_6_fu_1032_p1;
wire  signed [31:0] sext_ln86_7_fu_1037_p1;
wire  signed [31:0] sext_ln86_8_fu_1042_p1;
wire  signed [31:0] sext_ln86_9_fu_1047_p1;
wire  signed [31:0] sext_ln86_10_fu_1052_p1;
wire  signed [31:0] sext_ln86_11_fu_1057_p1;
wire  signed [31:0] sext_ln86_12_fu_1062_p1;
wire  signed [31:0] sext_ln86_13_fu_1067_p1;
wire   [31:0] trunc_ln98_fu_1162_p1;
wire   [14:0] tmp_6_fu_822_p3;
wire   [17:0] tmp_fu_815_p3;
wire   [17:0] zext_ln81_fu_829_p1;
wire   [17:0] or_ln86_fu_846_p2;
wire   [17:0] add_ln86_fu_858_p2;
wire   [17:0] add_ln86_1_fu_870_p2;
wire   [17:0] add_ln86_2_fu_882_p2;
wire   [17:0] add_ln86_3_fu_894_p2;
wire   [17:0] add_ln86_4_fu_906_p2;
wire   [17:0] add_ln86_5_fu_918_p2;
wire   [17:0] add_ln86_6_fu_930_p2;
wire   [17:0] add_ln86_7_fu_942_p2;
wire   [17:0] add_ln86_8_fu_954_p2;
wire   [17:0] add_ln86_9_fu_966_p2;
wire   [17:0] add_ln86_10_fu_978_p2;
wire   [17:0] add_ln86_11_fu_990_p2;
wire  signed [17:0] sext_ln95_1_fu_1108_p1;
wire  signed [12:0] sext_ln98_fu_1128_p1;
wire   [12:0] add_ln98_1_fu_1132_p2;
wire   [0:0] icmp_ln98_fu_1142_p2;
wire   [7:0] add_ln100_fu_1148_p2;
wire  signed [17:0] sext_ln104_fu_1167_p1;
wire   [17:0] add_ln106_fu_1176_p2;
reg   [15:0] ap_return_preg;
reg   [16:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 16'd0;
end

encoding_hash_search_temp #(
    .DataWidth( 32 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .address1(temp_address1),
    .ce1(temp_ce1),
    .we1(temp_we1),
    .d1(temp_d1),
    .q1(temp_q1)
);

encoding_hash_search_flag #(
    .DataWidth( 1 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
flag_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(flag_address0),
    .ce0(flag_ce0),
    .we0(flag_we0),
    .d0(flag_d0),
    .address1(flag_address1),
    .ce1(flag_ce1),
    .we1(flag_we1),
    .d1(flag_d1),
    .q1(flag_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state13))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state13);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_return_preg <= ap_phi_mux_retval_0_phi_fu_766_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond167_fu_787_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_40_reg_695 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_804_p2 == 1'd0))) begin
        empty_40_reg_695 <= empty_41_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond167_fu_787_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_684 <= empty_38_fu_776_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_684 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln95_1_reg_1413 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvars_iv_reg_717 <= add_ln98_reg_1417;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        indvars_iv_reg_717 <= sext_ln95_fu_1098_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_reg_706 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state16) & ((flag_q1 == 1'd0) | (icmp_ln104_reg_1437 == 1'd0)))) begin
        j_reg_706 <= add_ln91_reg_1392;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_1_fu_1112_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_727 <= k_1_fu_1102_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        k_reg_727 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln91_fu_1086_p2 == 1'd1) & (icmp_ln95_reg_1374 == 1'd0))) begin
        match_0_lcssa_reg_750 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln95_reg_1374 == 1'd1))) begin
        match_0_lcssa_reg_750 <= match_reg_738;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln95_1_reg_1413 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        match_reg_738 <= match_1_fu_1154_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        match_reg_738 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln91_fu_1086_p2 == 1'd0))) begin
        retval_0_reg_762 <= 16'd65535;
    end else if (((1'b1 == ap_CS_fsm_state18) | ((1'b1 == ap_CS_fsm_state17) & (icmp_ln91_reg_1388 == 1'd1) & (icmp_ln79_reg_1220 == 1'd0)))) begin
        retval_0_reg_762 <= hashArr_location_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln91_reg_1392 <= add_ln91_fu_1092_p2;
        icmp_ln91_reg_1388 <= icmp_ln91_fu_1086_p2;
        zext_ln91_1_reg_1383[3 : 0] <= zext_ln91_1_fu_1082_p1[3 : 0];
        zext_ln91_reg_1378[3 : 0] <= zext_ln91_fu_1077_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_1_fu_1112_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln98_reg_1417 <= add_ln98_fu_1122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_804_p2 == 1'd1))) begin
        hashArr_empty_flag_addr_10_reg_1354[17 : 1] <= zext_ln86_9_fu_960_p1[17 : 1];
        hashArr_empty_flag_addr_11_reg_1359[17 : 1] <= zext_ln86_10_fu_972_p1[17 : 1];
        hashArr_empty_flag_addr_12_reg_1364[17 : 1] <= zext_ln86_11_fu_984_p1[17 : 1];
        hashArr_empty_flag_addr_13_reg_1369[17 : 1] <= zext_ln86_12_fu_996_p1[17 : 1];
        hashArr_empty_flag_addr_2_reg_1314[17 : 1] <= zext_ln86_1_fu_864_p1[17 : 1];
        hashArr_empty_flag_addr_3_reg_1319[17 : 1] <= zext_ln86_2_fu_876_p1[17 : 1];
        hashArr_empty_flag_addr_4_reg_1324[17 : 1] <= zext_ln86_3_fu_888_p1[17 : 1];
        hashArr_empty_flag_addr_5_reg_1329[17 : 1] <= zext_ln86_4_fu_900_p1[17 : 1];
        hashArr_empty_flag_addr_6_reg_1334[17 : 1] <= zext_ln86_5_fu_912_p1[17 : 1];
        hashArr_empty_flag_addr_7_reg_1339[17 : 1] <= zext_ln86_6_fu_924_p1[17 : 1];
        hashArr_empty_flag_addr_8_reg_1344[17 : 1] <= zext_ln86_7_fu_936_p1[17 : 1];
        hashArr_empty_flag_addr_9_reg_1349[17 : 1] <= zext_ln86_8_fu_948_p1[17 : 1];
        hashArr_start_addr_10_reg_1284[17 : 1] <= zext_ln86_9_fu_960_p1[17 : 1];
        hashArr_start_addr_11_reg_1289[17 : 1] <= zext_ln86_10_fu_972_p1[17 : 1];
        hashArr_start_addr_12_reg_1294[17 : 1] <= zext_ln86_11_fu_984_p1[17 : 1];
        hashArr_start_addr_13_reg_1299[17 : 1] <= zext_ln86_12_fu_996_p1[17 : 1];
        hashArr_start_addr_2_reg_1244[17 : 1] <= zext_ln86_1_fu_864_p1[17 : 1];
        hashArr_start_addr_3_reg_1249[17 : 1] <= zext_ln86_2_fu_876_p1[17 : 1];
        hashArr_start_addr_4_reg_1254[17 : 1] <= zext_ln86_3_fu_888_p1[17 : 1];
        hashArr_start_addr_5_reg_1259[17 : 1] <= zext_ln86_4_fu_900_p1[17 : 1];
        hashArr_start_addr_6_reg_1264[17 : 1] <= zext_ln86_5_fu_912_p1[17 : 1];
        hashArr_start_addr_7_reg_1269[17 : 1] <= zext_ln86_6_fu_924_p1[17 : 1];
        hashArr_start_addr_8_reg_1274[17 : 1] <= zext_ln86_7_fu_936_p1[17 : 1];
        hashArr_start_addr_9_reg_1279[17 : 1] <= zext_ln86_8_fu_948_p1[17 : 1];
        icmp_ln79_reg_1220 <= icmp_ln79_fu_810_p2;
        sub_ln81_reg_1224[17 : 1] <= sub_ln81_fu_833_p2[17 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        icmp_ln104_reg_1437 <= icmp_ln104_fu_1171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln95_1_reg_1413 <= icmp_ln95_1_fu_1112_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        icmp_ln95_reg_1374 <= icmp_ln95_fu_1072_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln91_fu_1086_p2 == 1'd1))) begin
        temp_addr_15_reg_1397 <= zext_ln91_fu_1077_p1;
    end
end

always @ (*) begin
    if ((icmp_ln95_1_fu_1112_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln95_1_reg_1413 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvars_iv_phi_fu_720_p4 = add_ln98_reg_1417;
    end else begin
        ap_phi_mux_indvars_iv_phi_fu_720_p4 = indvars_iv_reg_717;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln95_reg_1374 == 1'd1))) begin
        ap_phi_mux_match_0_lcssa_phi_fu_754_p4 = match_reg_738;
    end else begin
        ap_phi_mux_match_0_lcssa_phi_fu_754_p4 = match_0_lcssa_reg_750;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln91_reg_1388 == 1'd1) & (icmp_ln79_reg_1220 == 1'd0))) begin
        ap_phi_mux_retval_0_phi_fu_766_p6 = hashArr_location_q0;
    end else begin
        ap_phi_mux_retval_0_phi_fu_766_p6 = retval_0_reg_762;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_return = ap_phi_mux_retval_0_phi_fu_766_p6;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        flag_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        flag_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        flag_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        flag_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        flag_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        flag_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        flag_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        flag_address0 = p_cast2_fu_799_p1;
    end else begin
        flag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        flag_address1 = zext_ln91_reg_1378;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        flag_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        flag_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        flag_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        flag_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        flag_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        flag_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        flag_address1 = 64'd0;
    end else begin
        flag_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        flag_ce0 = 1'b1;
    end else begin
        flag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        flag_ce1 = 1'b1;
    end else begin
        flag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10))) begin
        flag_d0 = hashArr_empty_flag_q1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        flag_d0 = hashArr_empty_flag_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        flag_d0 = 1'd0;
    end else begin
        flag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10))) begin
        flag_d1 = hashArr_empty_flag_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        flag_d1 = hashArr_empty_flag_q1;
    end else begin
        flag_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_804_p2 == 1'd0)))) begin
        flag_we0 = 1'b1;
    end else begin
        flag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        flag_we1 = 1'b1;
    end else begin
        flag_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        hashArr_empty_flag_address0 = hashArr_empty_flag_addr_13_reg_1369;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        hashArr_empty_flag_address0 = hashArr_empty_flag_addr_11_reg_1359;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hashArr_empty_flag_address0 = hashArr_empty_flag_addr_9_reg_1349;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hashArr_empty_flag_address0 = hashArr_empty_flag_addr_7_reg_1339;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        hashArr_empty_flag_address0 = hashArr_empty_flag_addr_5_reg_1329;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hashArr_empty_flag_address0 = hashArr_empty_flag_addr_3_reg_1319;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hashArr_empty_flag_address0 = zext_ln86_fu_852_p1;
    end else begin
        hashArr_empty_flag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        hashArr_empty_flag_address1 = hashArr_empty_flag_addr_12_reg_1364;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        hashArr_empty_flag_address1 = hashArr_empty_flag_addr_10_reg_1354;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hashArr_empty_flag_address1 = hashArr_empty_flag_addr_8_reg_1344;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hashArr_empty_flag_address1 = hashArr_empty_flag_addr_6_reg_1334;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        hashArr_empty_flag_address1 = hashArr_empty_flag_addr_4_reg_1324;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hashArr_empty_flag_address1 = hashArr_empty_flag_addr_2_reg_1314;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hashArr_empty_flag_address1 = zext_ln81_1_fu_839_p1;
    end else begin
        hashArr_empty_flag_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        hashArr_empty_flag_ce0 = 1'b1;
    end else begin
        hashArr_empty_flag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        hashArr_empty_flag_ce1 = 1'b1;
    end else begin
        hashArr_empty_flag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        hashArr_location_address0 = zext_ln106_fu_1180_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hashArr_location_address0 = zext_ln81_1_fu_839_p1;
    end else begin
        hashArr_location_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state16))) begin
        hashArr_location_ce0 = 1'b1;
    end else begin
        hashArr_location_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        hashArr_start_address0 = hashArr_start_addr_13_reg_1299;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        hashArr_start_address0 = hashArr_start_addr_11_reg_1289;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hashArr_start_address0 = hashArr_start_addr_9_reg_1279;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hashArr_start_address0 = hashArr_start_addr_7_reg_1269;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        hashArr_start_address0 = hashArr_start_addr_5_reg_1259;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hashArr_start_address0 = hashArr_start_addr_3_reg_1249;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hashArr_start_address0 = zext_ln86_fu_852_p1;
    end else begin
        hashArr_start_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        hashArr_start_address1 = hashArr_start_addr_12_reg_1294;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        hashArr_start_address1 = hashArr_start_addr_10_reg_1284;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hashArr_start_address1 = hashArr_start_addr_8_reg_1274;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hashArr_start_address1 = hashArr_start_addr_6_reg_1264;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        hashArr_start_address1 = hashArr_start_addr_4_reg_1254;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hashArr_start_address1 = hashArr_start_addr_2_reg_1244;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hashArr_start_address1 = zext_ln81_1_fu_839_p1;
    end else begin
        hashArr_start_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        hashArr_start_ce0 = 1'b1;
    end else begin
        hashArr_start_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        hashArr_start_ce1 = 1'b1;
    end else begin
        hashArr_start_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        key_ce1 = 1'b1;
    end else begin
        key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        temp_address0 = temp_addr_15_reg_1397;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_address0 = p_cast_fu_782_p1;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_address1 = zext_ln91_fu_1077_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_address1 = 64'd0;
    end else begin
        temp_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        temp_ce1 = 1'b1;
    end else begin
        temp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        temp_d0 = trunc_ln98_fu_1162_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_d0 = sext_ln86_12_fu_1062_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp_d0 = sext_ln86_10_fu_1052_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_d0 = sext_ln86_8_fu_1042_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_d0 = sext_ln86_6_fu_1032_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_d0 = sext_ln86_4_fu_1022_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_d0 = sext_ln86_2_fu_1012_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_d0 = sext_ln86_1_fu_1007_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_d0 = 32'd0;
    end else begin
        temp_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_d1 = sext_ln86_13_fu_1067_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp_d1 = sext_ln86_11_fu_1057_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_d1 = sext_ln86_9_fu_1047_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_d1 = sext_ln86_7_fu_1037_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_d1 = sext_ln86_5_fu_1027_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_d1 = sext_ln86_3_fu_1017_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_d1 = sext_ln86_fu_1002_p1;
    end else begin
        temp_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10) | ((exitcond167_fu_787_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state15) & (icmp_ln95_reg_1374 == 1'd1)))) begin
        temp_we0 = 1'b1;
    end else begin
        temp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        temp_we1 = 1'b1;
    end else begin
        temp_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond167_fu_787_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_804_p2 == 1'd1) & (icmp_ln79_fu_810_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_804_p2 == 1'd1) & (icmp_ln79_fu_810_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln91_fu_1086_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln91_fu_1086_p2 == 1'd1) & (icmp_ln95_reg_1374 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln95_1_fu_1112_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln95_1_fu_1112_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & ((flag_q1 == 1'd0) | (icmp_ln104_reg_1437 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_1148_p2 = (match_reg_738 + 8'd1);

assign add_ln106_fu_1176_p2 = (sub_ln81_reg_1224 + zext_ln91_1_reg_1383);

assign add_ln86_10_fu_978_p2 = (sub_ln81_fu_833_p2 + 18'd12);

assign add_ln86_11_fu_990_p2 = (sub_ln81_fu_833_p2 + 18'd13);

assign add_ln86_1_fu_870_p2 = (sub_ln81_fu_833_p2 + 18'd3);

assign add_ln86_2_fu_882_p2 = (sub_ln81_fu_833_p2 + 18'd4);

assign add_ln86_3_fu_894_p2 = (sub_ln81_fu_833_p2 + 18'd5);

assign add_ln86_4_fu_906_p2 = (sub_ln81_fu_833_p2 + 18'd6);

assign add_ln86_5_fu_918_p2 = (sub_ln81_fu_833_p2 + 18'd7);

assign add_ln86_6_fu_930_p2 = (sub_ln81_fu_833_p2 + 18'd8);

assign add_ln86_7_fu_942_p2 = (sub_ln81_fu_833_p2 + 18'd9);

assign add_ln86_8_fu_954_p2 = (sub_ln81_fu_833_p2 + 18'd10);

assign add_ln86_9_fu_966_p2 = (sub_ln81_fu_833_p2 + 18'd11);

assign add_ln86_fu_858_p2 = (sub_ln81_fu_833_p2 + 18'd2);

assign add_ln91_fu_1092_p2 = (j_reg_706 + 4'd1);

assign add_ln98_1_fu_1132_p2 = ($signed(sext_ln98_fu_1128_p1) + $signed(key_offset));

assign add_ln98_fu_1122_p2 = (ap_phi_mux_indvars_iv_phi_fu_720_p4 + 33'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_38_fu_776_p2 = (empty_reg_684 + 4'd1);

assign empty_41_fu_793_p2 = (empty_40_reg_695 + 4'd1);

assign exitcond167_fu_787_p2 = ((empty_reg_684 == 4'd14) ? 1'b1 : 1'b0);

assign exitcond6_fu_804_p2 = ((empty_40_reg_695 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln104_fu_1171_p2 = ((sext_ln104_fu_1167_p1 == len) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_810_p2 = ((len == 18'd1) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_1086_p2 = ((j_reg_706 < 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln95_1_fu_1112_p2 = (($signed(sext_ln95_1_fu_1108_p1) < $signed(len)) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_1072_p2 = (($signed(len) > $signed(18'd0)) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_1142_p2 = ((key_q1 == key_q0) ? 1'b1 : 1'b0);

assign indvars_iv_cast_fu_1117_p1 = ap_phi_mux_indvars_iv_phi_fu_720_p4;

assign k_1_fu_1102_p2 = ($signed(k_reg_727) + $signed(8'd1));

assign key_address0 = zext_ln98_fu_1137_p1;

assign key_address1 = indvars_iv_cast_fu_1117_p1;

assign match_1_fu_1154_p3 = ((icmp_ln98_fu_1142_p2[0:0] == 1'b1) ? add_ln100_fu_1148_p2 : match_reg_738);

assign or_ln86_fu_846_p2 = (sub_ln81_fu_833_p2 | 18'd1);

assign p_cast2_fu_799_p1 = empty_40_reg_695;

assign p_cast_fu_782_p1 = empty_reg_684;

assign sext_ln104_fu_1167_p1 = $signed(ap_phi_mux_match_0_lcssa_phi_fu_754_p4);

assign sext_ln86_10_fu_1052_p1 = $signed(hashArr_start_q1);

assign sext_ln86_11_fu_1057_p1 = $signed(hashArr_start_q0);

assign sext_ln86_12_fu_1062_p1 = $signed(hashArr_start_q1);

assign sext_ln86_13_fu_1067_p1 = $signed(hashArr_start_q0);

assign sext_ln86_1_fu_1007_p1 = $signed(hashArr_start_q0);

assign sext_ln86_2_fu_1012_p1 = $signed(hashArr_start_q1);

assign sext_ln86_3_fu_1017_p1 = $signed(hashArr_start_q0);

assign sext_ln86_4_fu_1022_p1 = $signed(hashArr_start_q1);

assign sext_ln86_5_fu_1027_p1 = $signed(hashArr_start_q0);

assign sext_ln86_6_fu_1032_p1 = $signed(hashArr_start_q1);

assign sext_ln86_7_fu_1037_p1 = $signed(hashArr_start_q0);

assign sext_ln86_8_fu_1042_p1 = $signed(hashArr_start_q1);

assign sext_ln86_9_fu_1047_p1 = $signed(hashArr_start_q0);

assign sext_ln86_fu_1002_p1 = $signed(hashArr_start_q1);

assign sext_ln95_1_fu_1108_p1 = k_reg_727;

assign sext_ln95_fu_1098_p1 = $signed(temp_q1);

assign sext_ln98_fu_1128_p1 = k_reg_727;

assign sub_ln81_fu_833_p2 = (tmp_fu_815_p3 - zext_ln81_fu_829_p1);

assign tmp_6_fu_822_p3 = {{hash}, {1'd0}};

assign tmp_fu_815_p3 = {{hash}, {4'd0}};

assign trunc_ln98_fu_1162_p1 = indvars_iv_reg_717[31:0];

assign zext_ln106_fu_1180_p1 = add_ln106_fu_1176_p2;

assign zext_ln81_1_fu_839_p1 = sub_ln81_fu_833_p2;

assign zext_ln81_fu_829_p1 = tmp_6_fu_822_p3;

assign zext_ln86_10_fu_972_p1 = add_ln86_9_fu_966_p2;

assign zext_ln86_11_fu_984_p1 = add_ln86_10_fu_978_p2;

assign zext_ln86_12_fu_996_p1 = add_ln86_11_fu_990_p2;

assign zext_ln86_1_fu_864_p1 = add_ln86_fu_858_p2;

assign zext_ln86_2_fu_876_p1 = add_ln86_1_fu_870_p2;

assign zext_ln86_3_fu_888_p1 = add_ln86_2_fu_882_p2;

assign zext_ln86_4_fu_900_p1 = add_ln86_3_fu_894_p2;

assign zext_ln86_5_fu_912_p1 = add_ln86_4_fu_906_p2;

assign zext_ln86_6_fu_924_p1 = add_ln86_5_fu_918_p2;

assign zext_ln86_7_fu_936_p1 = add_ln86_6_fu_930_p2;

assign zext_ln86_8_fu_948_p1 = add_ln86_7_fu_942_p2;

assign zext_ln86_9_fu_960_p1 = add_ln86_8_fu_954_p2;

assign zext_ln86_fu_852_p1 = or_ln86_fu_846_p2;

assign zext_ln91_1_fu_1082_p1 = j_reg_706;

assign zext_ln91_fu_1077_p1 = j_reg_706;

assign zext_ln98_fu_1137_p1 = add_ln98_1_fu_1132_p2;

always @ (posedge ap_clk) begin
    sub_ln81_reg_1224[0] <= 1'b0;
    hashArr_start_addr_2_reg_1244[0] <= 1'b0;
    hashArr_start_addr_3_reg_1249[0] <= 1'b1;
    hashArr_start_addr_4_reg_1254[0] <= 1'b0;
    hashArr_start_addr_5_reg_1259[0] <= 1'b1;
    hashArr_start_addr_6_reg_1264[0] <= 1'b0;
    hashArr_start_addr_7_reg_1269[0] <= 1'b1;
    hashArr_start_addr_8_reg_1274[0] <= 1'b0;
    hashArr_start_addr_9_reg_1279[0] <= 1'b1;
    hashArr_start_addr_10_reg_1284[0] <= 1'b0;
    hashArr_start_addr_11_reg_1289[0] <= 1'b1;
    hashArr_start_addr_12_reg_1294[0] <= 1'b0;
    hashArr_start_addr_13_reg_1299[0] <= 1'b1;
    hashArr_empty_flag_addr_2_reg_1314[0] <= 1'b0;
    hashArr_empty_flag_addr_3_reg_1319[0] <= 1'b1;
    hashArr_empty_flag_addr_4_reg_1324[0] <= 1'b0;
    hashArr_empty_flag_addr_5_reg_1329[0] <= 1'b1;
    hashArr_empty_flag_addr_6_reg_1334[0] <= 1'b0;
    hashArr_empty_flag_addr_7_reg_1339[0] <= 1'b1;
    hashArr_empty_flag_addr_8_reg_1344[0] <= 1'b0;
    hashArr_empty_flag_addr_9_reg_1349[0] <= 1'b1;
    hashArr_empty_flag_addr_10_reg_1354[0] <= 1'b0;
    hashArr_empty_flag_addr_11_reg_1359[0] <= 1'b1;
    hashArr_empty_flag_addr_12_reg_1364[0] <= 1'b0;
    hashArr_empty_flag_addr_13_reg_1369[0] <= 1'b1;
    zext_ln91_reg_1378[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln91_1_reg_1383[17:4] <= 14'b00000000000000;
end

endmodule //encoding_hash_search
