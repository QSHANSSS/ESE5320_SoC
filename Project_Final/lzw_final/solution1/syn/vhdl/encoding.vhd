-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encoding is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_P0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_P0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_P0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_P0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_P1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_P1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_P1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_P2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_P2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_P2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P3_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_P3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_P3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_P3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P0_USER_VALUE : INTEGER := 0;
    C_M_AXI_P0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_P0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_P1_USER_VALUE : INTEGER := 0;
    C_M_AXI_P1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_P1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_P2_USER_VALUE : INTEGER := 0;
    C_M_AXI_P2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_P2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_P3_USER_VALUE : INTEGER := 0;
    C_M_AXI_P3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_P3_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_p0_AWVALID : OUT STD_LOGIC;
    m_axi_p0_AWREADY : IN STD_LOGIC;
    m_axi_p0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_ADDR_WIDTH-1 downto 0);
    m_axi_p0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_ID_WIDTH-1 downto 0);
    m_axi_p0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_AWUSER_WIDTH-1 downto 0);
    m_axi_p0_WVALID : OUT STD_LOGIC;
    m_axi_p0_WREADY : IN STD_LOGIC;
    m_axi_p0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_DATA_WIDTH-1 downto 0);
    m_axi_p0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_DATA_WIDTH/8-1 downto 0);
    m_axi_p0_WLAST : OUT STD_LOGIC;
    m_axi_p0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_ID_WIDTH-1 downto 0);
    m_axi_p0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_WUSER_WIDTH-1 downto 0);
    m_axi_p0_ARVALID : OUT STD_LOGIC;
    m_axi_p0_ARREADY : IN STD_LOGIC;
    m_axi_p0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_ADDR_WIDTH-1 downto 0);
    m_axi_p0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_ID_WIDTH-1 downto 0);
    m_axi_p0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_ARUSER_WIDTH-1 downto 0);
    m_axi_p0_RVALID : IN STD_LOGIC;
    m_axi_p0_RREADY : OUT STD_LOGIC;
    m_axi_p0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_P0_DATA_WIDTH-1 downto 0);
    m_axi_p0_RLAST : IN STD_LOGIC;
    m_axi_p0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_P0_ID_WIDTH-1 downto 0);
    m_axi_p0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P0_RUSER_WIDTH-1 downto 0);
    m_axi_p0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_BVALID : IN STD_LOGIC;
    m_axi_p0_BREADY : OUT STD_LOGIC;
    m_axi_p0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_P0_ID_WIDTH-1 downto 0);
    m_axi_p0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P0_BUSER_WIDTH-1 downto 0);
    m_axi_p1_AWVALID : OUT STD_LOGIC;
    m_axi_p1_AWREADY : IN STD_LOGIC;
    m_axi_p1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_ADDR_WIDTH-1 downto 0);
    m_axi_p1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_ID_WIDTH-1 downto 0);
    m_axi_p1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_AWUSER_WIDTH-1 downto 0);
    m_axi_p1_WVALID : OUT STD_LOGIC;
    m_axi_p1_WREADY : IN STD_LOGIC;
    m_axi_p1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_DATA_WIDTH-1 downto 0);
    m_axi_p1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_DATA_WIDTH/8-1 downto 0);
    m_axi_p1_WLAST : OUT STD_LOGIC;
    m_axi_p1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_ID_WIDTH-1 downto 0);
    m_axi_p1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_WUSER_WIDTH-1 downto 0);
    m_axi_p1_ARVALID : OUT STD_LOGIC;
    m_axi_p1_ARREADY : IN STD_LOGIC;
    m_axi_p1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_ADDR_WIDTH-1 downto 0);
    m_axi_p1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_ID_WIDTH-1 downto 0);
    m_axi_p1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_ARUSER_WIDTH-1 downto 0);
    m_axi_p1_RVALID : IN STD_LOGIC;
    m_axi_p1_RREADY : OUT STD_LOGIC;
    m_axi_p1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_P1_DATA_WIDTH-1 downto 0);
    m_axi_p1_RLAST : IN STD_LOGIC;
    m_axi_p1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_P1_ID_WIDTH-1 downto 0);
    m_axi_p1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P1_RUSER_WIDTH-1 downto 0);
    m_axi_p1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_BVALID : IN STD_LOGIC;
    m_axi_p1_BREADY : OUT STD_LOGIC;
    m_axi_p1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_P1_ID_WIDTH-1 downto 0);
    m_axi_p1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P1_BUSER_WIDTH-1 downto 0);
    m_axi_p2_AWVALID : OUT STD_LOGIC;
    m_axi_p2_AWREADY : IN STD_LOGIC;
    m_axi_p2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P2_ADDR_WIDTH-1 downto 0);
    m_axi_p2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_P2_ID_WIDTH-1 downto 0);
    m_axi_p2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P2_AWUSER_WIDTH-1 downto 0);
    m_axi_p2_WVALID : OUT STD_LOGIC;
    m_axi_p2_WREADY : IN STD_LOGIC;
    m_axi_p2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_P2_DATA_WIDTH-1 downto 0);
    m_axi_p2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_P2_DATA_WIDTH/8-1 downto 0);
    m_axi_p2_WLAST : OUT STD_LOGIC;
    m_axi_p2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_P2_ID_WIDTH-1 downto 0);
    m_axi_p2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P2_WUSER_WIDTH-1 downto 0);
    m_axi_p2_ARVALID : OUT STD_LOGIC;
    m_axi_p2_ARREADY : IN STD_LOGIC;
    m_axi_p2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P2_ADDR_WIDTH-1 downto 0);
    m_axi_p2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_P2_ID_WIDTH-1 downto 0);
    m_axi_p2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P2_ARUSER_WIDTH-1 downto 0);
    m_axi_p2_RVALID : IN STD_LOGIC;
    m_axi_p2_RREADY : OUT STD_LOGIC;
    m_axi_p2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_P2_DATA_WIDTH-1 downto 0);
    m_axi_p2_RLAST : IN STD_LOGIC;
    m_axi_p2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_P2_ID_WIDTH-1 downto 0);
    m_axi_p2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P2_RUSER_WIDTH-1 downto 0);
    m_axi_p2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p2_BVALID : IN STD_LOGIC;
    m_axi_p2_BREADY : OUT STD_LOGIC;
    m_axi_p2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_P2_ID_WIDTH-1 downto 0);
    m_axi_p2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P2_BUSER_WIDTH-1 downto 0);
    m_axi_p3_AWVALID : OUT STD_LOGIC;
    m_axi_p3_AWREADY : IN STD_LOGIC;
    m_axi_p3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P3_ADDR_WIDTH-1 downto 0);
    m_axi_p3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_P3_ID_WIDTH-1 downto 0);
    m_axi_p3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P3_AWUSER_WIDTH-1 downto 0);
    m_axi_p3_WVALID : OUT STD_LOGIC;
    m_axi_p3_WREADY : IN STD_LOGIC;
    m_axi_p3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_P3_DATA_WIDTH-1 downto 0);
    m_axi_p3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_P3_DATA_WIDTH/8-1 downto 0);
    m_axi_p3_WLAST : OUT STD_LOGIC;
    m_axi_p3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_P3_ID_WIDTH-1 downto 0);
    m_axi_p3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P3_WUSER_WIDTH-1 downto 0);
    m_axi_p3_ARVALID : OUT STD_LOGIC;
    m_axi_p3_ARREADY : IN STD_LOGIC;
    m_axi_p3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P3_ADDR_WIDTH-1 downto 0);
    m_axi_p3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_P3_ID_WIDTH-1 downto 0);
    m_axi_p3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P3_ARUSER_WIDTH-1 downto 0);
    m_axi_p3_RVALID : IN STD_LOGIC;
    m_axi_p3_RREADY : OUT STD_LOGIC;
    m_axi_p3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_P3_DATA_WIDTH-1 downto 0);
    m_axi_p3_RLAST : IN STD_LOGIC;
    m_axi_p3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_P3_ID_WIDTH-1 downto 0);
    m_axi_p3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P3_RUSER_WIDTH-1 downto 0);
    m_axi_p3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p3_BVALID : IN STD_LOGIC;
    m_axi_p3_BREADY : OUT STD_LOGIC;
    m_axi_p3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_P3_ID_WIDTH-1 downto 0);
    m_axi_p3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P3_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of encoding is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "encoding_encoding,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=6.670000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.869100,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=311,HLS_SYN_DSP=0,HLS_SYN_FF=5395,HLS_SYN_LUT=14501,HLS_VERSION=2020_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal buff : STD_LOGIC_VECTOR (63 downto 0);
    signal input_length : STD_LOGIC_VECTOR (63 downto 0);
    signal output_compress : STD_LOGIC_VECTOR (63 downto 0);
    signal output_length : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal p0_AWREADY : STD_LOGIC;
    signal p0_WREADY : STD_LOGIC;
    signal p0_ARREADY : STD_LOGIC;
    signal p0_RVALID : STD_LOGIC;
    signal p0_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal p0_RLAST : STD_LOGIC;
    signal p0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal p0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal p0_BVALID : STD_LOGIC;
    signal p0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal p0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal p0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p1_AWREADY : STD_LOGIC;
    signal p1_WREADY : STD_LOGIC;
    signal p1_ARREADY : STD_LOGIC;
    signal p1_RVALID : STD_LOGIC;
    signal p1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal p1_RLAST : STD_LOGIC;
    signal p1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal p1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal p1_BVALID : STD_LOGIC;
    signal p1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal p1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal p1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p2_AWREADY : STD_LOGIC;
    signal p2_WREADY : STD_LOGIC;
    signal p2_ARREADY : STD_LOGIC;
    signal p2_RVALID : STD_LOGIC;
    signal p2_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal p2_RLAST : STD_LOGIC;
    signal p2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal p2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal p2_BVALID : STD_LOGIC;
    signal p2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal p2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal p2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p3_AWREADY : STD_LOGIC;
    signal p3_WREADY : STD_LOGIC;
    signal p3_ARREADY : STD_LOGIC;
    signal p3_RVALID : STD_LOGIC;
    signal p3_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal p3_RLAST : STD_LOGIC;
    signal p3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal p3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal p3_BVALID : STD_LOGIC;
    signal p3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal p3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal p3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load6_U0_ap_start : STD_LOGIC;
    signal load6_U0_start_full_n : STD_LOGIC;
    signal load6_U0_ap_done : STD_LOGIC;
    signal load6_U0_ap_continue : STD_LOGIC;
    signal load6_U0_ap_idle : STD_LOGIC;
    signal load6_U0_ap_ready : STD_LOGIC;
    signal load6_U0_start_out : STD_LOGIC;
    signal load6_U0_start_write : STD_LOGIC;
    signal load6_U0_m_axi_p0_AWVALID : STD_LOGIC;
    signal load6_U0_m_axi_p0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load6_U0_m_axi_p0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load6_U0_m_axi_p0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load6_U0_m_axi_p0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load6_U0_m_axi_p0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load6_U0_m_axi_p0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load6_U0_m_axi_p0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load6_U0_m_axi_p0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load6_U0_m_axi_p0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load6_U0_m_axi_p0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load6_U0_m_axi_p0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load6_U0_m_axi_p0_WVALID : STD_LOGIC;
    signal load6_U0_m_axi_p0_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal load6_U0_m_axi_p0_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal load6_U0_m_axi_p0_WLAST : STD_LOGIC;
    signal load6_U0_m_axi_p0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load6_U0_m_axi_p0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load6_U0_m_axi_p0_ARVALID : STD_LOGIC;
    signal load6_U0_m_axi_p0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load6_U0_m_axi_p0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load6_U0_m_axi_p0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load6_U0_m_axi_p0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load6_U0_m_axi_p0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load6_U0_m_axi_p0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load6_U0_m_axi_p0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load6_U0_m_axi_p0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load6_U0_m_axi_p0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load6_U0_m_axi_p0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load6_U0_m_axi_p0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load6_U0_m_axi_p0_RREADY : STD_LOGIC;
    signal load6_U0_m_axi_p0_BREADY : STD_LOGIC;
    signal load6_U0_instream_din : STD_LOGIC_VECTOR (7 downto 0);
    signal load6_U0_instream_write : STD_LOGIC;
    signal load6_U0_m_axi_p1_AWVALID : STD_LOGIC;
    signal load6_U0_m_axi_p1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load6_U0_m_axi_p1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load6_U0_m_axi_p1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load6_U0_m_axi_p1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load6_U0_m_axi_p1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load6_U0_m_axi_p1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load6_U0_m_axi_p1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load6_U0_m_axi_p1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load6_U0_m_axi_p1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load6_U0_m_axi_p1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load6_U0_m_axi_p1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load6_U0_m_axi_p1_WVALID : STD_LOGIC;
    signal load6_U0_m_axi_p1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal load6_U0_m_axi_p1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal load6_U0_m_axi_p1_WLAST : STD_LOGIC;
    signal load6_U0_m_axi_p1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load6_U0_m_axi_p1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load6_U0_m_axi_p1_ARVALID : STD_LOGIC;
    signal load6_U0_m_axi_p1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load6_U0_m_axi_p1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load6_U0_m_axi_p1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load6_U0_m_axi_p1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load6_U0_m_axi_p1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load6_U0_m_axi_p1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load6_U0_m_axi_p1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load6_U0_m_axi_p1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load6_U0_m_axi_p1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load6_U0_m_axi_p1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load6_U0_m_axi_p1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load6_U0_m_axi_p1_RREADY : STD_LOGIC;
    signal load6_U0_m_axi_p1_BREADY : STD_LOGIC;
    signal load6_U0_inlen_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load6_U0_inlen_stream_write : STD_LOGIC;
    signal load6_U0_output_compress_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal load6_U0_output_compress_out_write : STD_LOGIC;
    signal load6_U0_output_length_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal load6_U0_output_length_out_write : STD_LOGIC;
    signal lzw_compute_U0_ap_start : STD_LOGIC;
    signal lzw_compute_U0_ap_done : STD_LOGIC;
    signal lzw_compute_U0_ap_continue : STD_LOGIC;
    signal lzw_compute_U0_ap_idle : STD_LOGIC;
    signal lzw_compute_U0_ap_ready : STD_LOGIC;
    signal lzw_compute_U0_instream_read : STD_LOGIC;
    signal lzw_compute_U0_inlen_stream_read : STD_LOGIC;
    signal lzw_compute_U0_outstream_din : STD_LOGIC_VECTOR (15 downto 0);
    signal lzw_compute_U0_outstream_write : STD_LOGIC;
    signal lzw_compute_U0_outlen_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal lzw_compute_U0_outlen_stream_write : STD_LOGIC;
    signal store_U0_ap_start : STD_LOGIC;
    signal store_U0_ap_done : STD_LOGIC;
    signal store_U0_ap_continue : STD_LOGIC;
    signal store_U0_ap_idle : STD_LOGIC;
    signal store_U0_ap_ready : STD_LOGIC;
    signal store_U0_outstream_read : STD_LOGIC;
    signal store_U0_m_axi_p2_AWVALID : STD_LOGIC;
    signal store_U0_m_axi_p2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_U0_m_axi_p2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_p2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_U0_m_axi_p2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_U0_m_axi_p2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_U0_m_axi_p2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_U0_m_axi_p2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_p2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_U0_m_axi_p2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_p2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_p2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_p2_WVALID : STD_LOGIC;
    signal store_U0_m_axi_p2_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal store_U0_m_axi_p2_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal store_U0_m_axi_p2_WLAST : STD_LOGIC;
    signal store_U0_m_axi_p2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_p2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_p2_ARVALID : STD_LOGIC;
    signal store_U0_m_axi_p2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_U0_m_axi_p2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_p2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_U0_m_axi_p2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_U0_m_axi_p2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_U0_m_axi_p2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_U0_m_axi_p2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_p2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_U0_m_axi_p2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_p2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_p2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_p2_RREADY : STD_LOGIC;
    signal store_U0_m_axi_p2_BREADY : STD_LOGIC;
    signal store_U0_outlen_stream_read : STD_LOGIC;
    signal store_U0_m_axi_p3_AWVALID : STD_LOGIC;
    signal store_U0_m_axi_p3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_U0_m_axi_p3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_p3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_U0_m_axi_p3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_U0_m_axi_p3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_U0_m_axi_p3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_U0_m_axi_p3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_p3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_U0_m_axi_p3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_p3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_p3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_p3_WVALID : STD_LOGIC;
    signal store_U0_m_axi_p3_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal store_U0_m_axi_p3_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_p3_WLAST : STD_LOGIC;
    signal store_U0_m_axi_p3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_p3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_p3_ARVALID : STD_LOGIC;
    signal store_U0_m_axi_p3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_U0_m_axi_p3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_p3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_U0_m_axi_p3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_U0_m_axi_p3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_U0_m_axi_p3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_U0_m_axi_p3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_p3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_U0_m_axi_p3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_p3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_p3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_p3_RREADY : STD_LOGIC;
    signal store_U0_m_axi_p3_BREADY : STD_LOGIC;
    signal store_U0_outArr_read : STD_LOGIC;
    signal store_U0_len_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal instream_full_n : STD_LOGIC;
    signal instream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal instream_empty_n : STD_LOGIC;
    signal inlen_stream_full_n : STD_LOGIC;
    signal inlen_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inlen_stream_empty_n : STD_LOGIC;
    signal output_compress_c_full_n : STD_LOGIC;
    signal output_compress_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal output_compress_c_empty_n : STD_LOGIC;
    signal output_length_c_full_n : STD_LOGIC;
    signal output_length_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal output_length_c_empty_n : STD_LOGIC;
    signal outstream_full_n : STD_LOGIC;
    signal outstream_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal outstream_empty_n : STD_LOGIC;
    signal outlen_stream_full_n : STD_LOGIC;
    signal outlen_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outlen_stream_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_lzw_compute_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_lzw_compute_U0_full_n : STD_LOGIC;
    signal start_for_lzw_compute_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_lzw_compute_U0_empty_n : STD_LOGIC;
    signal start_for_store_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_U0_full_n : STD_LOGIC;
    signal start_for_store_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_U0_empty_n : STD_LOGIC;
    signal lzw_compute_U0_start_full_n : STD_LOGIC;
    signal lzw_compute_U0_start_write : STD_LOGIC;
    signal store_U0_start_full_n : STD_LOGIC;
    signal store_U0_start_write : STD_LOGIC;

    component encoding_load6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_p0_AWVALID : OUT STD_LOGIC;
        m_axi_p0_AWREADY : IN STD_LOGIC;
        m_axi_p0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_WVALID : OUT STD_LOGIC;
        m_axi_p0_WREADY : IN STD_LOGIC;
        m_axi_p0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_p0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_WLAST : OUT STD_LOGIC;
        m_axi_p0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_ARVALID : OUT STD_LOGIC;
        m_axi_p0_ARREADY : IN STD_LOGIC;
        m_axi_p0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_RVALID : IN STD_LOGIC;
        m_axi_p0_RREADY : OUT STD_LOGIC;
        m_axi_p0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_p0_RLAST : IN STD_LOGIC;
        m_axi_p0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_BVALID : IN STD_LOGIC;
        m_axi_p0_BREADY : OUT STD_LOGIC;
        m_axi_p0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        instream_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        instream_full_n : IN STD_LOGIC;
        instream_write : OUT STD_LOGIC;
        m_axi_p1_AWVALID : OUT STD_LOGIC;
        m_axi_p1_AWREADY : IN STD_LOGIC;
        m_axi_p1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_WVALID : OUT STD_LOGIC;
        m_axi_p1_WREADY : IN STD_LOGIC;
        m_axi_p1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_WLAST : OUT STD_LOGIC;
        m_axi_p1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_ARVALID : OUT STD_LOGIC;
        m_axi_p1_ARREADY : IN STD_LOGIC;
        m_axi_p1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_RVALID : IN STD_LOGIC;
        m_axi_p1_RREADY : OUT STD_LOGIC;
        m_axi_p1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p1_RLAST : IN STD_LOGIC;
        m_axi_p1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_BVALID : IN STD_LOGIC;
        m_axi_p1_BREADY : OUT STD_LOGIC;
        m_axi_p1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inlen_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inlen_stream_full_n : IN STD_LOGIC;
        inlen_stream_write : OUT STD_LOGIC;
        input_r : IN STD_LOGIC_VECTOR (63 downto 0);
        len : IN STD_LOGIC_VECTOR (63 downto 0);
        output_compress : IN STD_LOGIC_VECTOR (63 downto 0);
        output_length : IN STD_LOGIC_VECTOR (63 downto 0);
        output_compress_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_compress_out_full_n : IN STD_LOGIC;
        output_compress_out_write : OUT STD_LOGIC;
        output_length_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_length_out_full_n : IN STD_LOGIC;
        output_length_out_write : OUT STD_LOGIC );
    end component;


    component encoding_lzw_compute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        instream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        instream_empty_n : IN STD_LOGIC;
        instream_read : OUT STD_LOGIC;
        inlen_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inlen_stream_empty_n : IN STD_LOGIC;
        inlen_stream_read : OUT STD_LOGIC;
        outstream_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        outstream_full_n : IN STD_LOGIC;
        outstream_write : OUT STD_LOGIC;
        outlen_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outlen_stream_full_n : IN STD_LOGIC;
        outlen_stream_write : OUT STD_LOGIC );
    end component;


    component encoding_store IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outstream_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        outstream_empty_n : IN STD_LOGIC;
        outstream_read : OUT STD_LOGIC;
        m_axi_p2_AWVALID : OUT STD_LOGIC;
        m_axi_p2_AWREADY : IN STD_LOGIC;
        m_axi_p2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p2_WVALID : OUT STD_LOGIC;
        m_axi_p2_WREADY : IN STD_LOGIC;
        m_axi_p2_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_p2_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p2_WLAST : OUT STD_LOGIC;
        m_axi_p2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p2_ARVALID : OUT STD_LOGIC;
        m_axi_p2_ARREADY : IN STD_LOGIC;
        m_axi_p2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p2_RVALID : IN STD_LOGIC;
        m_axi_p2_RREADY : OUT STD_LOGIC;
        m_axi_p2_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_p2_RLAST : IN STD_LOGIC;
        m_axi_p2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p2_BVALID : IN STD_LOGIC;
        m_axi_p2_BREADY : OUT STD_LOGIC;
        m_axi_p2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outlen_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outlen_stream_empty_n : IN STD_LOGIC;
        outlen_stream_read : OUT STD_LOGIC;
        m_axi_p3_AWVALID : OUT STD_LOGIC;
        m_axi_p3_AWREADY : IN STD_LOGIC;
        m_axi_p3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p3_WVALID : OUT STD_LOGIC;
        m_axi_p3_WREADY : IN STD_LOGIC;
        m_axi_p3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p3_WLAST : OUT STD_LOGIC;
        m_axi_p3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p3_ARVALID : OUT STD_LOGIC;
        m_axi_p3_ARREADY : IN STD_LOGIC;
        m_axi_p3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p3_RVALID : IN STD_LOGIC;
        m_axi_p3_RREADY : OUT STD_LOGIC;
        m_axi_p3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p3_RLAST : IN STD_LOGIC;
        m_axi_p3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p3_BVALID : IN STD_LOGIC;
        m_axi_p3_BREADY : OUT STD_LOGIC;
        m_axi_p3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outArr_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        outArr_empty_n : IN STD_LOGIC;
        outArr_read : OUT STD_LOGIC;
        len_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        len_empty_n : IN STD_LOGIC;
        len_read : OUT STD_LOGIC );
    end component;


    component encoding_fifo_w8_d8192_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component encoding_fifo_w32_d8192_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component encoding_fifo_w64_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component encoding_fifo_w16_d8192_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component encoding_start_for_lzw_compute_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component encoding_start_for_store_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component encoding_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        buff : OUT STD_LOGIC_VECTOR (63 downto 0);
        input_length : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_compress : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_length : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component encoding_p0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component encoding_p1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component encoding_p2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component encoding_p3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component encoding_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        buff => buff,
        input_length => input_length,
        output_compress => output_compress,
        output_length => output_length,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    p0_m_axi_U : component encoding_p0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_P0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_P0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_P0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_P0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_P0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_P0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_P0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_P0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_P0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_P0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_P0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_p0_AWVALID,
        AWREADY => m_axi_p0_AWREADY,
        AWADDR => m_axi_p0_AWADDR,
        AWID => m_axi_p0_AWID,
        AWLEN => m_axi_p0_AWLEN,
        AWSIZE => m_axi_p0_AWSIZE,
        AWBURST => m_axi_p0_AWBURST,
        AWLOCK => m_axi_p0_AWLOCK,
        AWCACHE => m_axi_p0_AWCACHE,
        AWPROT => m_axi_p0_AWPROT,
        AWQOS => m_axi_p0_AWQOS,
        AWREGION => m_axi_p0_AWREGION,
        AWUSER => m_axi_p0_AWUSER,
        WVALID => m_axi_p0_WVALID,
        WREADY => m_axi_p0_WREADY,
        WDATA => m_axi_p0_WDATA,
        WSTRB => m_axi_p0_WSTRB,
        WLAST => m_axi_p0_WLAST,
        WID => m_axi_p0_WID,
        WUSER => m_axi_p0_WUSER,
        ARVALID => m_axi_p0_ARVALID,
        ARREADY => m_axi_p0_ARREADY,
        ARADDR => m_axi_p0_ARADDR,
        ARID => m_axi_p0_ARID,
        ARLEN => m_axi_p0_ARLEN,
        ARSIZE => m_axi_p0_ARSIZE,
        ARBURST => m_axi_p0_ARBURST,
        ARLOCK => m_axi_p0_ARLOCK,
        ARCACHE => m_axi_p0_ARCACHE,
        ARPROT => m_axi_p0_ARPROT,
        ARQOS => m_axi_p0_ARQOS,
        ARREGION => m_axi_p0_ARREGION,
        ARUSER => m_axi_p0_ARUSER,
        RVALID => m_axi_p0_RVALID,
        RREADY => m_axi_p0_RREADY,
        RDATA => m_axi_p0_RDATA,
        RLAST => m_axi_p0_RLAST,
        RID => m_axi_p0_RID,
        RUSER => m_axi_p0_RUSER,
        RRESP => m_axi_p0_RRESP,
        BVALID => m_axi_p0_BVALID,
        BREADY => m_axi_p0_BREADY,
        BRESP => m_axi_p0_BRESP,
        BID => m_axi_p0_BID,
        BUSER => m_axi_p0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => load6_U0_m_axi_p0_ARVALID,
        I_ARREADY => p0_ARREADY,
        I_ARADDR => load6_U0_m_axi_p0_ARADDR,
        I_ARID => load6_U0_m_axi_p0_ARID,
        I_ARLEN => load6_U0_m_axi_p0_ARLEN,
        I_ARSIZE => load6_U0_m_axi_p0_ARSIZE,
        I_ARLOCK => load6_U0_m_axi_p0_ARLOCK,
        I_ARCACHE => load6_U0_m_axi_p0_ARCACHE,
        I_ARQOS => load6_U0_m_axi_p0_ARQOS,
        I_ARPROT => load6_U0_m_axi_p0_ARPROT,
        I_ARUSER => load6_U0_m_axi_p0_ARUSER,
        I_ARBURST => load6_U0_m_axi_p0_ARBURST,
        I_ARREGION => load6_U0_m_axi_p0_ARREGION,
        I_RVALID => p0_RVALID,
        I_RREADY => load6_U0_m_axi_p0_RREADY,
        I_RDATA => p0_RDATA,
        I_RID => p0_RID,
        I_RUSER => p0_RUSER,
        I_RRESP => p0_RRESP,
        I_RLAST => p0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => p0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => p0_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => p0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => p0_BRESP,
        I_BID => p0_BID,
        I_BUSER => p0_BUSER);

    p1_m_axi_U : component encoding_p1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_P1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_P1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_P1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_P1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_P1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_P1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_P1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_P1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_P1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_P1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_P1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_p1_AWVALID,
        AWREADY => m_axi_p1_AWREADY,
        AWADDR => m_axi_p1_AWADDR,
        AWID => m_axi_p1_AWID,
        AWLEN => m_axi_p1_AWLEN,
        AWSIZE => m_axi_p1_AWSIZE,
        AWBURST => m_axi_p1_AWBURST,
        AWLOCK => m_axi_p1_AWLOCK,
        AWCACHE => m_axi_p1_AWCACHE,
        AWPROT => m_axi_p1_AWPROT,
        AWQOS => m_axi_p1_AWQOS,
        AWREGION => m_axi_p1_AWREGION,
        AWUSER => m_axi_p1_AWUSER,
        WVALID => m_axi_p1_WVALID,
        WREADY => m_axi_p1_WREADY,
        WDATA => m_axi_p1_WDATA,
        WSTRB => m_axi_p1_WSTRB,
        WLAST => m_axi_p1_WLAST,
        WID => m_axi_p1_WID,
        WUSER => m_axi_p1_WUSER,
        ARVALID => m_axi_p1_ARVALID,
        ARREADY => m_axi_p1_ARREADY,
        ARADDR => m_axi_p1_ARADDR,
        ARID => m_axi_p1_ARID,
        ARLEN => m_axi_p1_ARLEN,
        ARSIZE => m_axi_p1_ARSIZE,
        ARBURST => m_axi_p1_ARBURST,
        ARLOCK => m_axi_p1_ARLOCK,
        ARCACHE => m_axi_p1_ARCACHE,
        ARPROT => m_axi_p1_ARPROT,
        ARQOS => m_axi_p1_ARQOS,
        ARREGION => m_axi_p1_ARREGION,
        ARUSER => m_axi_p1_ARUSER,
        RVALID => m_axi_p1_RVALID,
        RREADY => m_axi_p1_RREADY,
        RDATA => m_axi_p1_RDATA,
        RLAST => m_axi_p1_RLAST,
        RID => m_axi_p1_RID,
        RUSER => m_axi_p1_RUSER,
        RRESP => m_axi_p1_RRESP,
        BVALID => m_axi_p1_BVALID,
        BREADY => m_axi_p1_BREADY,
        BRESP => m_axi_p1_BRESP,
        BID => m_axi_p1_BID,
        BUSER => m_axi_p1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => load6_U0_m_axi_p1_ARVALID,
        I_ARREADY => p1_ARREADY,
        I_ARADDR => load6_U0_m_axi_p1_ARADDR,
        I_ARID => load6_U0_m_axi_p1_ARID,
        I_ARLEN => load6_U0_m_axi_p1_ARLEN,
        I_ARSIZE => load6_U0_m_axi_p1_ARSIZE,
        I_ARLOCK => load6_U0_m_axi_p1_ARLOCK,
        I_ARCACHE => load6_U0_m_axi_p1_ARCACHE,
        I_ARQOS => load6_U0_m_axi_p1_ARQOS,
        I_ARPROT => load6_U0_m_axi_p1_ARPROT,
        I_ARUSER => load6_U0_m_axi_p1_ARUSER,
        I_ARBURST => load6_U0_m_axi_p1_ARBURST,
        I_ARREGION => load6_U0_m_axi_p1_ARREGION,
        I_RVALID => p1_RVALID,
        I_RREADY => load6_U0_m_axi_p1_RREADY,
        I_RDATA => p1_RDATA,
        I_RID => p1_RID,
        I_RUSER => p1_RUSER,
        I_RRESP => p1_RRESP,
        I_RLAST => p1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => p1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => p1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => p1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => p1_BRESP,
        I_BID => p1_BID,
        I_BUSER => p1_BUSER);

    p2_m_axi_U : component encoding_p2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_P2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_P2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_P2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_P2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_P2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_P2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_P2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_P2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_P2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_P2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_P2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_p2_AWVALID,
        AWREADY => m_axi_p2_AWREADY,
        AWADDR => m_axi_p2_AWADDR,
        AWID => m_axi_p2_AWID,
        AWLEN => m_axi_p2_AWLEN,
        AWSIZE => m_axi_p2_AWSIZE,
        AWBURST => m_axi_p2_AWBURST,
        AWLOCK => m_axi_p2_AWLOCK,
        AWCACHE => m_axi_p2_AWCACHE,
        AWPROT => m_axi_p2_AWPROT,
        AWQOS => m_axi_p2_AWQOS,
        AWREGION => m_axi_p2_AWREGION,
        AWUSER => m_axi_p2_AWUSER,
        WVALID => m_axi_p2_WVALID,
        WREADY => m_axi_p2_WREADY,
        WDATA => m_axi_p2_WDATA,
        WSTRB => m_axi_p2_WSTRB,
        WLAST => m_axi_p2_WLAST,
        WID => m_axi_p2_WID,
        WUSER => m_axi_p2_WUSER,
        ARVALID => m_axi_p2_ARVALID,
        ARREADY => m_axi_p2_ARREADY,
        ARADDR => m_axi_p2_ARADDR,
        ARID => m_axi_p2_ARID,
        ARLEN => m_axi_p2_ARLEN,
        ARSIZE => m_axi_p2_ARSIZE,
        ARBURST => m_axi_p2_ARBURST,
        ARLOCK => m_axi_p2_ARLOCK,
        ARCACHE => m_axi_p2_ARCACHE,
        ARPROT => m_axi_p2_ARPROT,
        ARQOS => m_axi_p2_ARQOS,
        ARREGION => m_axi_p2_ARREGION,
        ARUSER => m_axi_p2_ARUSER,
        RVALID => m_axi_p2_RVALID,
        RREADY => m_axi_p2_RREADY,
        RDATA => m_axi_p2_RDATA,
        RLAST => m_axi_p2_RLAST,
        RID => m_axi_p2_RID,
        RUSER => m_axi_p2_RUSER,
        RRESP => m_axi_p2_RRESP,
        BVALID => m_axi_p2_BVALID,
        BREADY => m_axi_p2_BREADY,
        BRESP => m_axi_p2_BRESP,
        BID => m_axi_p2_BID,
        BUSER => m_axi_p2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => p2_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => p2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => p2_RDATA,
        I_RID => p2_RID,
        I_RUSER => p2_RUSER,
        I_RRESP => p2_RRESP,
        I_RLAST => p2_RLAST,
        I_AWVALID => store_U0_m_axi_p2_AWVALID,
        I_AWREADY => p2_AWREADY,
        I_AWADDR => store_U0_m_axi_p2_AWADDR,
        I_AWID => store_U0_m_axi_p2_AWID,
        I_AWLEN => store_U0_m_axi_p2_AWLEN,
        I_AWSIZE => store_U0_m_axi_p2_AWSIZE,
        I_AWLOCK => store_U0_m_axi_p2_AWLOCK,
        I_AWCACHE => store_U0_m_axi_p2_AWCACHE,
        I_AWQOS => store_U0_m_axi_p2_AWQOS,
        I_AWPROT => store_U0_m_axi_p2_AWPROT,
        I_AWUSER => store_U0_m_axi_p2_AWUSER,
        I_AWBURST => store_U0_m_axi_p2_AWBURST,
        I_AWREGION => store_U0_m_axi_p2_AWREGION,
        I_WVALID => store_U0_m_axi_p2_WVALID,
        I_WREADY => p2_WREADY,
        I_WDATA => store_U0_m_axi_p2_WDATA,
        I_WID => store_U0_m_axi_p2_WID,
        I_WUSER => store_U0_m_axi_p2_WUSER,
        I_WLAST => store_U0_m_axi_p2_WLAST,
        I_WSTRB => store_U0_m_axi_p2_WSTRB,
        I_BVALID => p2_BVALID,
        I_BREADY => store_U0_m_axi_p2_BREADY,
        I_BRESP => p2_BRESP,
        I_BID => p2_BID,
        I_BUSER => p2_BUSER);

    p3_m_axi_U : component encoding_p3_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_P3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_P3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_P3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_P3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_P3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_P3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_P3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_P3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_P3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_P3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_P3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_p3_AWVALID,
        AWREADY => m_axi_p3_AWREADY,
        AWADDR => m_axi_p3_AWADDR,
        AWID => m_axi_p3_AWID,
        AWLEN => m_axi_p3_AWLEN,
        AWSIZE => m_axi_p3_AWSIZE,
        AWBURST => m_axi_p3_AWBURST,
        AWLOCK => m_axi_p3_AWLOCK,
        AWCACHE => m_axi_p3_AWCACHE,
        AWPROT => m_axi_p3_AWPROT,
        AWQOS => m_axi_p3_AWQOS,
        AWREGION => m_axi_p3_AWREGION,
        AWUSER => m_axi_p3_AWUSER,
        WVALID => m_axi_p3_WVALID,
        WREADY => m_axi_p3_WREADY,
        WDATA => m_axi_p3_WDATA,
        WSTRB => m_axi_p3_WSTRB,
        WLAST => m_axi_p3_WLAST,
        WID => m_axi_p3_WID,
        WUSER => m_axi_p3_WUSER,
        ARVALID => m_axi_p3_ARVALID,
        ARREADY => m_axi_p3_ARREADY,
        ARADDR => m_axi_p3_ARADDR,
        ARID => m_axi_p3_ARID,
        ARLEN => m_axi_p3_ARLEN,
        ARSIZE => m_axi_p3_ARSIZE,
        ARBURST => m_axi_p3_ARBURST,
        ARLOCK => m_axi_p3_ARLOCK,
        ARCACHE => m_axi_p3_ARCACHE,
        ARPROT => m_axi_p3_ARPROT,
        ARQOS => m_axi_p3_ARQOS,
        ARREGION => m_axi_p3_ARREGION,
        ARUSER => m_axi_p3_ARUSER,
        RVALID => m_axi_p3_RVALID,
        RREADY => m_axi_p3_RREADY,
        RDATA => m_axi_p3_RDATA,
        RLAST => m_axi_p3_RLAST,
        RID => m_axi_p3_RID,
        RUSER => m_axi_p3_RUSER,
        RRESP => m_axi_p3_RRESP,
        BVALID => m_axi_p3_BVALID,
        BREADY => m_axi_p3_BREADY,
        BRESP => m_axi_p3_BRESP,
        BID => m_axi_p3_BID,
        BUSER => m_axi_p3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => p3_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => p3_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => p3_RDATA,
        I_RID => p3_RID,
        I_RUSER => p3_RUSER,
        I_RRESP => p3_RRESP,
        I_RLAST => p3_RLAST,
        I_AWVALID => store_U0_m_axi_p3_AWVALID,
        I_AWREADY => p3_AWREADY,
        I_AWADDR => store_U0_m_axi_p3_AWADDR,
        I_AWID => store_U0_m_axi_p3_AWID,
        I_AWLEN => store_U0_m_axi_p3_AWLEN,
        I_AWSIZE => store_U0_m_axi_p3_AWSIZE,
        I_AWLOCK => store_U0_m_axi_p3_AWLOCK,
        I_AWCACHE => store_U0_m_axi_p3_AWCACHE,
        I_AWQOS => store_U0_m_axi_p3_AWQOS,
        I_AWPROT => store_U0_m_axi_p3_AWPROT,
        I_AWUSER => store_U0_m_axi_p3_AWUSER,
        I_AWBURST => store_U0_m_axi_p3_AWBURST,
        I_AWREGION => store_U0_m_axi_p3_AWREGION,
        I_WVALID => store_U0_m_axi_p3_WVALID,
        I_WREADY => p3_WREADY,
        I_WDATA => store_U0_m_axi_p3_WDATA,
        I_WID => store_U0_m_axi_p3_WID,
        I_WUSER => store_U0_m_axi_p3_WUSER,
        I_WLAST => store_U0_m_axi_p3_WLAST,
        I_WSTRB => store_U0_m_axi_p3_WSTRB,
        I_BVALID => p3_BVALID,
        I_BREADY => store_U0_m_axi_p3_BREADY,
        I_BRESP => p3_BRESP,
        I_BID => p3_BID,
        I_BUSER => p3_BUSER);

    load6_U0 : component encoding_load6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => load6_U0_ap_start,
        start_full_n => load6_U0_start_full_n,
        ap_done => load6_U0_ap_done,
        ap_continue => load6_U0_ap_continue,
        ap_idle => load6_U0_ap_idle,
        ap_ready => load6_U0_ap_ready,
        start_out => load6_U0_start_out,
        start_write => load6_U0_start_write,
        m_axi_p0_AWVALID => load6_U0_m_axi_p0_AWVALID,
        m_axi_p0_AWREADY => ap_const_logic_0,
        m_axi_p0_AWADDR => load6_U0_m_axi_p0_AWADDR,
        m_axi_p0_AWID => load6_U0_m_axi_p0_AWID,
        m_axi_p0_AWLEN => load6_U0_m_axi_p0_AWLEN,
        m_axi_p0_AWSIZE => load6_U0_m_axi_p0_AWSIZE,
        m_axi_p0_AWBURST => load6_U0_m_axi_p0_AWBURST,
        m_axi_p0_AWLOCK => load6_U0_m_axi_p0_AWLOCK,
        m_axi_p0_AWCACHE => load6_U0_m_axi_p0_AWCACHE,
        m_axi_p0_AWPROT => load6_U0_m_axi_p0_AWPROT,
        m_axi_p0_AWQOS => load6_U0_m_axi_p0_AWQOS,
        m_axi_p0_AWREGION => load6_U0_m_axi_p0_AWREGION,
        m_axi_p0_AWUSER => load6_U0_m_axi_p0_AWUSER,
        m_axi_p0_WVALID => load6_U0_m_axi_p0_WVALID,
        m_axi_p0_WREADY => ap_const_logic_0,
        m_axi_p0_WDATA => load6_U0_m_axi_p0_WDATA,
        m_axi_p0_WSTRB => load6_U0_m_axi_p0_WSTRB,
        m_axi_p0_WLAST => load6_U0_m_axi_p0_WLAST,
        m_axi_p0_WID => load6_U0_m_axi_p0_WID,
        m_axi_p0_WUSER => load6_U0_m_axi_p0_WUSER,
        m_axi_p0_ARVALID => load6_U0_m_axi_p0_ARVALID,
        m_axi_p0_ARREADY => p0_ARREADY,
        m_axi_p0_ARADDR => load6_U0_m_axi_p0_ARADDR,
        m_axi_p0_ARID => load6_U0_m_axi_p0_ARID,
        m_axi_p0_ARLEN => load6_U0_m_axi_p0_ARLEN,
        m_axi_p0_ARSIZE => load6_U0_m_axi_p0_ARSIZE,
        m_axi_p0_ARBURST => load6_U0_m_axi_p0_ARBURST,
        m_axi_p0_ARLOCK => load6_U0_m_axi_p0_ARLOCK,
        m_axi_p0_ARCACHE => load6_U0_m_axi_p0_ARCACHE,
        m_axi_p0_ARPROT => load6_U0_m_axi_p0_ARPROT,
        m_axi_p0_ARQOS => load6_U0_m_axi_p0_ARQOS,
        m_axi_p0_ARREGION => load6_U0_m_axi_p0_ARREGION,
        m_axi_p0_ARUSER => load6_U0_m_axi_p0_ARUSER,
        m_axi_p0_RVALID => p0_RVALID,
        m_axi_p0_RREADY => load6_U0_m_axi_p0_RREADY,
        m_axi_p0_RDATA => p0_RDATA,
        m_axi_p0_RLAST => p0_RLAST,
        m_axi_p0_RID => p0_RID,
        m_axi_p0_RUSER => p0_RUSER,
        m_axi_p0_RRESP => p0_RRESP,
        m_axi_p0_BVALID => ap_const_logic_0,
        m_axi_p0_BREADY => load6_U0_m_axi_p0_BREADY,
        m_axi_p0_BRESP => ap_const_lv2_0,
        m_axi_p0_BID => ap_const_lv1_0,
        m_axi_p0_BUSER => ap_const_lv1_0,
        instream_din => load6_U0_instream_din,
        instream_full_n => instream_full_n,
        instream_write => load6_U0_instream_write,
        m_axi_p1_AWVALID => load6_U0_m_axi_p1_AWVALID,
        m_axi_p1_AWREADY => ap_const_logic_0,
        m_axi_p1_AWADDR => load6_U0_m_axi_p1_AWADDR,
        m_axi_p1_AWID => load6_U0_m_axi_p1_AWID,
        m_axi_p1_AWLEN => load6_U0_m_axi_p1_AWLEN,
        m_axi_p1_AWSIZE => load6_U0_m_axi_p1_AWSIZE,
        m_axi_p1_AWBURST => load6_U0_m_axi_p1_AWBURST,
        m_axi_p1_AWLOCK => load6_U0_m_axi_p1_AWLOCK,
        m_axi_p1_AWCACHE => load6_U0_m_axi_p1_AWCACHE,
        m_axi_p1_AWPROT => load6_U0_m_axi_p1_AWPROT,
        m_axi_p1_AWQOS => load6_U0_m_axi_p1_AWQOS,
        m_axi_p1_AWREGION => load6_U0_m_axi_p1_AWREGION,
        m_axi_p1_AWUSER => load6_U0_m_axi_p1_AWUSER,
        m_axi_p1_WVALID => load6_U0_m_axi_p1_WVALID,
        m_axi_p1_WREADY => ap_const_logic_0,
        m_axi_p1_WDATA => load6_U0_m_axi_p1_WDATA,
        m_axi_p1_WSTRB => load6_U0_m_axi_p1_WSTRB,
        m_axi_p1_WLAST => load6_U0_m_axi_p1_WLAST,
        m_axi_p1_WID => load6_U0_m_axi_p1_WID,
        m_axi_p1_WUSER => load6_U0_m_axi_p1_WUSER,
        m_axi_p1_ARVALID => load6_U0_m_axi_p1_ARVALID,
        m_axi_p1_ARREADY => p1_ARREADY,
        m_axi_p1_ARADDR => load6_U0_m_axi_p1_ARADDR,
        m_axi_p1_ARID => load6_U0_m_axi_p1_ARID,
        m_axi_p1_ARLEN => load6_U0_m_axi_p1_ARLEN,
        m_axi_p1_ARSIZE => load6_U0_m_axi_p1_ARSIZE,
        m_axi_p1_ARBURST => load6_U0_m_axi_p1_ARBURST,
        m_axi_p1_ARLOCK => load6_U0_m_axi_p1_ARLOCK,
        m_axi_p1_ARCACHE => load6_U0_m_axi_p1_ARCACHE,
        m_axi_p1_ARPROT => load6_U0_m_axi_p1_ARPROT,
        m_axi_p1_ARQOS => load6_U0_m_axi_p1_ARQOS,
        m_axi_p1_ARREGION => load6_U0_m_axi_p1_ARREGION,
        m_axi_p1_ARUSER => load6_U0_m_axi_p1_ARUSER,
        m_axi_p1_RVALID => p1_RVALID,
        m_axi_p1_RREADY => load6_U0_m_axi_p1_RREADY,
        m_axi_p1_RDATA => p1_RDATA,
        m_axi_p1_RLAST => p1_RLAST,
        m_axi_p1_RID => p1_RID,
        m_axi_p1_RUSER => p1_RUSER,
        m_axi_p1_RRESP => p1_RRESP,
        m_axi_p1_BVALID => ap_const_logic_0,
        m_axi_p1_BREADY => load6_U0_m_axi_p1_BREADY,
        m_axi_p1_BRESP => ap_const_lv2_0,
        m_axi_p1_BID => ap_const_lv1_0,
        m_axi_p1_BUSER => ap_const_lv1_0,
        inlen_stream_din => load6_U0_inlen_stream_din,
        inlen_stream_full_n => inlen_stream_full_n,
        inlen_stream_write => load6_U0_inlen_stream_write,
        input_r => buff,
        len => input_length,
        output_compress => output_compress,
        output_length => output_length,
        output_compress_out_din => load6_U0_output_compress_out_din,
        output_compress_out_full_n => output_compress_c_full_n,
        output_compress_out_write => load6_U0_output_compress_out_write,
        output_length_out_din => load6_U0_output_length_out_din,
        output_length_out_full_n => output_length_c_full_n,
        output_length_out_write => load6_U0_output_length_out_write);

    lzw_compute_U0 : component encoding_lzw_compute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => lzw_compute_U0_ap_start,
        ap_done => lzw_compute_U0_ap_done,
        ap_continue => lzw_compute_U0_ap_continue,
        ap_idle => lzw_compute_U0_ap_idle,
        ap_ready => lzw_compute_U0_ap_ready,
        instream_dout => instream_dout,
        instream_empty_n => instream_empty_n,
        instream_read => lzw_compute_U0_instream_read,
        inlen_stream_dout => inlen_stream_dout,
        inlen_stream_empty_n => inlen_stream_empty_n,
        inlen_stream_read => lzw_compute_U0_inlen_stream_read,
        outstream_din => lzw_compute_U0_outstream_din,
        outstream_full_n => outstream_full_n,
        outstream_write => lzw_compute_U0_outstream_write,
        outlen_stream_din => lzw_compute_U0_outlen_stream_din,
        outlen_stream_full_n => outlen_stream_full_n,
        outlen_stream_write => lzw_compute_U0_outlen_stream_write);

    store_U0 : component encoding_store
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => store_U0_ap_start,
        ap_done => store_U0_ap_done,
        ap_continue => store_U0_ap_continue,
        ap_idle => store_U0_ap_idle,
        ap_ready => store_U0_ap_ready,
        outstream_dout => outstream_dout,
        outstream_empty_n => outstream_empty_n,
        outstream_read => store_U0_outstream_read,
        m_axi_p2_AWVALID => store_U0_m_axi_p2_AWVALID,
        m_axi_p2_AWREADY => p2_AWREADY,
        m_axi_p2_AWADDR => store_U0_m_axi_p2_AWADDR,
        m_axi_p2_AWID => store_U0_m_axi_p2_AWID,
        m_axi_p2_AWLEN => store_U0_m_axi_p2_AWLEN,
        m_axi_p2_AWSIZE => store_U0_m_axi_p2_AWSIZE,
        m_axi_p2_AWBURST => store_U0_m_axi_p2_AWBURST,
        m_axi_p2_AWLOCK => store_U0_m_axi_p2_AWLOCK,
        m_axi_p2_AWCACHE => store_U0_m_axi_p2_AWCACHE,
        m_axi_p2_AWPROT => store_U0_m_axi_p2_AWPROT,
        m_axi_p2_AWQOS => store_U0_m_axi_p2_AWQOS,
        m_axi_p2_AWREGION => store_U0_m_axi_p2_AWREGION,
        m_axi_p2_AWUSER => store_U0_m_axi_p2_AWUSER,
        m_axi_p2_WVALID => store_U0_m_axi_p2_WVALID,
        m_axi_p2_WREADY => p2_WREADY,
        m_axi_p2_WDATA => store_U0_m_axi_p2_WDATA,
        m_axi_p2_WSTRB => store_U0_m_axi_p2_WSTRB,
        m_axi_p2_WLAST => store_U0_m_axi_p2_WLAST,
        m_axi_p2_WID => store_U0_m_axi_p2_WID,
        m_axi_p2_WUSER => store_U0_m_axi_p2_WUSER,
        m_axi_p2_ARVALID => store_U0_m_axi_p2_ARVALID,
        m_axi_p2_ARREADY => ap_const_logic_0,
        m_axi_p2_ARADDR => store_U0_m_axi_p2_ARADDR,
        m_axi_p2_ARID => store_U0_m_axi_p2_ARID,
        m_axi_p2_ARLEN => store_U0_m_axi_p2_ARLEN,
        m_axi_p2_ARSIZE => store_U0_m_axi_p2_ARSIZE,
        m_axi_p2_ARBURST => store_U0_m_axi_p2_ARBURST,
        m_axi_p2_ARLOCK => store_U0_m_axi_p2_ARLOCK,
        m_axi_p2_ARCACHE => store_U0_m_axi_p2_ARCACHE,
        m_axi_p2_ARPROT => store_U0_m_axi_p2_ARPROT,
        m_axi_p2_ARQOS => store_U0_m_axi_p2_ARQOS,
        m_axi_p2_ARREGION => store_U0_m_axi_p2_ARREGION,
        m_axi_p2_ARUSER => store_U0_m_axi_p2_ARUSER,
        m_axi_p2_RVALID => ap_const_logic_0,
        m_axi_p2_RREADY => store_U0_m_axi_p2_RREADY,
        m_axi_p2_RDATA => ap_const_lv16_0,
        m_axi_p2_RLAST => ap_const_logic_0,
        m_axi_p2_RID => ap_const_lv1_0,
        m_axi_p2_RUSER => ap_const_lv1_0,
        m_axi_p2_RRESP => ap_const_lv2_0,
        m_axi_p2_BVALID => p2_BVALID,
        m_axi_p2_BREADY => store_U0_m_axi_p2_BREADY,
        m_axi_p2_BRESP => p2_BRESP,
        m_axi_p2_BID => p2_BID,
        m_axi_p2_BUSER => p2_BUSER,
        outlen_stream_dout => outlen_stream_dout,
        outlen_stream_empty_n => outlen_stream_empty_n,
        outlen_stream_read => store_U0_outlen_stream_read,
        m_axi_p3_AWVALID => store_U0_m_axi_p3_AWVALID,
        m_axi_p3_AWREADY => p3_AWREADY,
        m_axi_p3_AWADDR => store_U0_m_axi_p3_AWADDR,
        m_axi_p3_AWID => store_U0_m_axi_p3_AWID,
        m_axi_p3_AWLEN => store_U0_m_axi_p3_AWLEN,
        m_axi_p3_AWSIZE => store_U0_m_axi_p3_AWSIZE,
        m_axi_p3_AWBURST => store_U0_m_axi_p3_AWBURST,
        m_axi_p3_AWLOCK => store_U0_m_axi_p3_AWLOCK,
        m_axi_p3_AWCACHE => store_U0_m_axi_p3_AWCACHE,
        m_axi_p3_AWPROT => store_U0_m_axi_p3_AWPROT,
        m_axi_p3_AWQOS => store_U0_m_axi_p3_AWQOS,
        m_axi_p3_AWREGION => store_U0_m_axi_p3_AWREGION,
        m_axi_p3_AWUSER => store_U0_m_axi_p3_AWUSER,
        m_axi_p3_WVALID => store_U0_m_axi_p3_WVALID,
        m_axi_p3_WREADY => p3_WREADY,
        m_axi_p3_WDATA => store_U0_m_axi_p3_WDATA,
        m_axi_p3_WSTRB => store_U0_m_axi_p3_WSTRB,
        m_axi_p3_WLAST => store_U0_m_axi_p3_WLAST,
        m_axi_p3_WID => store_U0_m_axi_p3_WID,
        m_axi_p3_WUSER => store_U0_m_axi_p3_WUSER,
        m_axi_p3_ARVALID => store_U0_m_axi_p3_ARVALID,
        m_axi_p3_ARREADY => ap_const_logic_0,
        m_axi_p3_ARADDR => store_U0_m_axi_p3_ARADDR,
        m_axi_p3_ARID => store_U0_m_axi_p3_ARID,
        m_axi_p3_ARLEN => store_U0_m_axi_p3_ARLEN,
        m_axi_p3_ARSIZE => store_U0_m_axi_p3_ARSIZE,
        m_axi_p3_ARBURST => store_U0_m_axi_p3_ARBURST,
        m_axi_p3_ARLOCK => store_U0_m_axi_p3_ARLOCK,
        m_axi_p3_ARCACHE => store_U0_m_axi_p3_ARCACHE,
        m_axi_p3_ARPROT => store_U0_m_axi_p3_ARPROT,
        m_axi_p3_ARQOS => store_U0_m_axi_p3_ARQOS,
        m_axi_p3_ARREGION => store_U0_m_axi_p3_ARREGION,
        m_axi_p3_ARUSER => store_U0_m_axi_p3_ARUSER,
        m_axi_p3_RVALID => ap_const_logic_0,
        m_axi_p3_RREADY => store_U0_m_axi_p3_RREADY,
        m_axi_p3_RDATA => ap_const_lv32_0,
        m_axi_p3_RLAST => ap_const_logic_0,
        m_axi_p3_RID => ap_const_lv1_0,
        m_axi_p3_RUSER => ap_const_lv1_0,
        m_axi_p3_RRESP => ap_const_lv2_0,
        m_axi_p3_BVALID => p3_BVALID,
        m_axi_p3_BREADY => store_U0_m_axi_p3_BREADY,
        m_axi_p3_BRESP => p3_BRESP,
        m_axi_p3_BID => p3_BID,
        m_axi_p3_BUSER => p3_BUSER,
        outArr_dout => output_compress_c_dout,
        outArr_empty_n => output_compress_c_empty_n,
        outArr_read => store_U0_outArr_read,
        len_dout => output_length_c_dout,
        len_empty_n => output_length_c_empty_n,
        len_read => store_U0_len_read);

    instream_U : component encoding_fifo_w8_d8192_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load6_U0_instream_din,
        if_full_n => instream_full_n,
        if_write => load6_U0_instream_write,
        if_dout => instream_dout,
        if_empty_n => instream_empty_n,
        if_read => lzw_compute_U0_instream_read);

    inlen_stream_U : component encoding_fifo_w32_d8192_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load6_U0_inlen_stream_din,
        if_full_n => inlen_stream_full_n,
        if_write => load6_U0_inlen_stream_write,
        if_dout => inlen_stream_dout,
        if_empty_n => inlen_stream_empty_n,
        if_read => lzw_compute_U0_inlen_stream_read);

    output_compress_c_U : component encoding_fifo_w64_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load6_U0_output_compress_out_din,
        if_full_n => output_compress_c_full_n,
        if_write => load6_U0_output_compress_out_write,
        if_dout => output_compress_c_dout,
        if_empty_n => output_compress_c_empty_n,
        if_read => store_U0_outArr_read);

    output_length_c_U : component encoding_fifo_w64_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load6_U0_output_length_out_din,
        if_full_n => output_length_c_full_n,
        if_write => load6_U0_output_length_out_write,
        if_dout => output_length_c_dout,
        if_empty_n => output_length_c_empty_n,
        if_read => store_U0_len_read);

    outstream_U : component encoding_fifo_w16_d8192_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lzw_compute_U0_outstream_din,
        if_full_n => outstream_full_n,
        if_write => lzw_compute_U0_outstream_write,
        if_dout => outstream_dout,
        if_empty_n => outstream_empty_n,
        if_read => store_U0_outstream_read);

    outlen_stream_U : component encoding_fifo_w32_d8192_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lzw_compute_U0_outlen_stream_din,
        if_full_n => outlen_stream_full_n,
        if_write => lzw_compute_U0_outlen_stream_write,
        if_dout => outlen_stream_dout,
        if_empty_n => outlen_stream_empty_n,
        if_read => store_U0_outlen_stream_read);

    start_for_lzw_compute_U0_U : component encoding_start_for_lzw_compute_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_lzw_compute_U0_din,
        if_full_n => start_for_lzw_compute_U0_full_n,
        if_write => load6_U0_start_write,
        if_dout => start_for_lzw_compute_U0_dout,
        if_empty_n => start_for_lzw_compute_U0_empty_n,
        if_read => lzw_compute_U0_ap_ready);

    start_for_store_U0_U : component encoding_start_for_store_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_store_U0_din,
        if_full_n => start_for_store_U0_full_n,
        if_write => load6_U0_start_write,
        if_dout => start_for_store_U0_dout,
        if_empty_n => start_for_store_U0_empty_n,
        if_read => store_U0_ap_ready);





    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    ap_done <= store_U0_ap_done;
    ap_idle <= (store_U0_ap_idle and lzw_compute_U0_ap_idle and load6_U0_ap_idle);
    ap_ready <= load6_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= store_U0_ap_done;
    ap_sync_ready <= load6_U0_ap_ready;
    load6_U0_ap_continue <= ap_const_logic_1;
    load6_U0_ap_start <= ap_start;
    load6_U0_start_full_n <= (start_for_store_U0_full_n and start_for_lzw_compute_U0_full_n);
    lzw_compute_U0_ap_continue <= ap_const_logic_1;
    lzw_compute_U0_ap_start <= start_for_lzw_compute_U0_empty_n;
    lzw_compute_U0_start_full_n <= ap_const_logic_1;
    lzw_compute_U0_start_write <= ap_const_logic_0;
    start_for_lzw_compute_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_store_U0_din <= (0=>ap_const_logic_1, others=>'-');
    store_U0_ap_continue <= ap_continue;
    store_U0_ap_start <= start_for_store_U0_empty_n;
    store_U0_start_full_n <= ap_const_logic_1;
    store_U0_start_write <= ap_const_logic_0;
end behav;
