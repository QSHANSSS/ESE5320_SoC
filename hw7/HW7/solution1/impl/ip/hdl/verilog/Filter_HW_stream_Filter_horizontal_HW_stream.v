// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Filter_HW_stream_Filter_horizontal_HW_stream (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        input_stream_dout,
        input_stream_empty_n,
        input_stream_read,
        temp_stream_din,
        temp_stream_full_n,
        temp_stream_write
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_pp0_stage0 = 9'd128;
parameter    ap_ST_fsm_state13 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] input_stream_dout;
input   input_stream_empty_n;
output   input_stream_read;
output  [7:0] temp_stream_din;
input   temp_stream_full_n;
output   temp_stream_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg input_stream_read;
reg temp_stream_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    input_stream_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln155_fu_165_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln162_reg_372;
reg    temp_stream_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln162_reg_372_pp0_iter3_reg;
reg   [8:0] X_reg_84;
reg   [7:0] temp_11_reg_95;
reg   [7:0] temp_10_reg_105;
reg   [7:0] temp_9_reg_116;
reg   [7:0] temp_8_reg_127;
reg   [7:0] temp_7_reg_138;
reg   [7:0] temp_6_reg_149;
wire   [8:0] Y_1_fu_159_p2;
reg   [8:0] Y_1_reg_329;
reg    ap_block_state2;
reg   [7:0] tmp_reg_337;
reg   [7:0] tmp_1_reg_342;
reg   [7:0] tmp_2_reg_347;
reg   [7:0] tmp_3_reg_352;
reg   [7:0] tmp_4_reg_357;
wire   [8:0] X_1_fu_171_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
reg    ap_block_state12_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln162_fu_177_p2;
reg   [0:0] icmp_ln162_reg_372_pp0_iter1_reg;
reg   [0:0] icmp_ln162_reg_372_pp0_iter2_reg;
reg   [7:0] tmp_6_reg_376;
wire   [8:0] tmp2_i_fu_229_p2;
reg   [8:0] tmp2_i_reg_386;
reg   [8:0] tmp2_i_reg_386_pp0_iter2_reg;
wire   [14:0] add_ln170_1_fu_267_p2;
reg   [14:0] add_ln170_1_reg_392;
reg   [14:0] add_ln170_1_reg_392_pp0_iter2_reg;
reg   [14:0] add_ln170_1_reg_392_pp0_iter3_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state9;
reg    ap_enable_reg_pp0_iter3;
reg   [8:0] Y_reg_73;
reg    ap_block_state1;
wire    ap_CS_fsm_state13;
reg   [7:0] ap_phi_mux_temp_11_phi_fu_98_p4;
reg   [7:0] ap_phi_mux_temp_10_phi_fu_108_p4;
reg   [7:0] ap_phi_mux_temp_9_phi_fu_119_p4;
reg   [7:0] ap_phi_mux_temp_8_phi_fu_130_p4;
reg   [7:0] ap_phi_mux_temp_7_phi_fu_141_p4;
reg   [7:0] ap_phi_mux_temp_6_phi_fu_152_p4;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] tmp_7_cast_i_fu_207_p1;
wire   [8:0] temp_6_cast_i_fu_203_p1;
wire   [8:0] tmp6_i_fu_211_p2;
wire   [9:0] tmp1_i_fu_217_p3;
wire   [8:0] zext_ln170_1_fu_187_p1;
wire   [8:0] zext_ln166_fu_195_p1;
wire   [8:0] zext_ln170_fu_183_p1;
wire   [8:0] zext_ln166_1_fu_199_p1;
wire   [8:0] tmp4_i_fu_235_p2;
wire   [12:0] p_shl_i_fu_245_p3;
wire   [13:0] p_shl_cast_i_fu_253_p1;
wire   [13:0] tmp4_cast9_i_fu_241_p1;
wire   [13:0] tmp5_i_fu_257_p2;
wire  signed [14:0] sext_ln170_fu_263_p1;
wire   [14:0] tmp1_i_cast_fu_225_p1;
wire   [14:0] p_shl1_i_fu_273_p3;
wire   [9:0] p_shl2_i_fu_284_p3;
wire   [15:0] p_shl1_cast_i_fu_280_p1;
wire   [15:0] p_shl2_cast_i_fu_291_p1;
wire  signed [15:0] sext_ln170_1_fu_301_p1;
wire   [15:0] grp_fu_320_p3;
(* use_dsp48 = "no" *) wire   [15:0] Sum_fu_304_p2;
wire   [7:0] grp_fu_320_p0;
wire   [7:0] grp_fu_320_p1;
wire   [15:0] grp_fu_320_p2;
reg    grp_fu_320_ce;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [14:0] grp_fu_320_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Filter_HW_stream_mac_muladd_8ns_8ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_16ns_16_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_320_p0),
    .din1(grp_fu_320_p1),
    .din2(grp_fu_320_p2),
    .ce(grp_fu_320_ce),
    .dout(grp_fu_320_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln155_fu_165_p2 == 1'd0) & (input_stream_empty_n == 1'b0)) & (icmp_ln155_fu_165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state9)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_fu_177_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_reg_84 <= X_1_fu_171_p2;
    end else if (((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        X_reg_84 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        Y_reg_73 <= Y_1_reg_329;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_reg_73 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln162_reg_372_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_10_reg_105 <= temp_11_reg_95;
    end else if (((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        temp_10_reg_105 <= tmp_4_reg_357;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln162_reg_372_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_11_reg_95 <= tmp_6_reg_376;
    end else if (((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        temp_11_reg_95 <= input_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln162_reg_372_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_6_reg_149 <= temp_7_reg_138;
    end else if (((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        temp_6_reg_149 <= tmp_reg_337;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln162_reg_372_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_7_reg_138 <= temp_8_reg_127;
    end else if (((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        temp_7_reg_138 <= tmp_1_reg_342;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln162_reg_372_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_8_reg_127 <= temp_9_reg_116;
    end else if (((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        temp_8_reg_127 <= tmp_2_reg_347;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln162_reg_372_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_9_reg_116 <= temp_10_reg_105;
    end else if (((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        temp_9_reg_116 <= tmp_3_reg_352;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln155_fu_165_p2 == 1'd0) & (input_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        Y_1_reg_329 <= Y_1_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_372 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln170_1_reg_392 <= add_ln170_1_fu_267_p2;
        tmp2_i_reg_386 <= tmp2_i_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln170_1_reg_392_pp0_iter2_reg <= add_ln170_1_reg_392;
        add_ln170_1_reg_392_pp0_iter3_reg <= add_ln170_1_reg_392_pp0_iter2_reg;
        icmp_ln162_reg_372_pp0_iter2_reg <= icmp_ln162_reg_372_pp0_iter1_reg;
        icmp_ln162_reg_372_pp0_iter3_reg <= icmp_ln162_reg_372_pp0_iter2_reg;
        tmp2_i_reg_386_pp0_iter2_reg <= tmp2_i_reg_386;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln162_reg_372 <= icmp_ln162_fu_177_p2;
        icmp_ln162_reg_372_pp0_iter1_reg <= icmp_ln162_reg_372;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_1_reg_342 <= input_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_2_reg_347 <= input_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_3_reg_352 <= input_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_4_reg_357 <= input_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_372 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_6_reg_376 <= input_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln155_fu_165_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_337 <= input_stream_dout;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_fu_177_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln155_fu_165_p2 == 1'd0) & (input_stream_empty_n == 1'b0)) & (icmp_ln155_fu_165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln162_reg_372_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_temp_10_phi_fu_108_p4 = temp_11_reg_95;
    end else begin
        ap_phi_mux_temp_10_phi_fu_108_p4 = temp_10_reg_105;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln162_reg_372_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_temp_11_phi_fu_98_p4 = tmp_6_reg_376;
    end else begin
        ap_phi_mux_temp_11_phi_fu_98_p4 = temp_11_reg_95;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln162_reg_372_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_temp_6_phi_fu_152_p4 = temp_7_reg_138;
    end else begin
        ap_phi_mux_temp_6_phi_fu_152_p4 = temp_6_reg_149;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln162_reg_372_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_temp_7_phi_fu_141_p4 = temp_8_reg_127;
    end else begin
        ap_phi_mux_temp_7_phi_fu_141_p4 = temp_7_reg_138;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln162_reg_372_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_temp_8_phi_fu_130_p4 = temp_9_reg_116;
    end else begin
        ap_phi_mux_temp_8_phi_fu_130_p4 = temp_8_reg_127;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln162_reg_372_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_temp_9_phi_fu_119_p4 = temp_10_reg_105;
    end else begin
        ap_phi_mux_temp_9_phi_fu_119_p4 = temp_9_reg_116;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_320_ce = 1'b1;
    end else begin
        grp_fu_320_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_372 == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln155_fu_165_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        input_stream_blk_n = input_stream_empty_n;
    end else begin
        input_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_372 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((icmp_ln155_fu_165_p2 == 1'd0) & (input_stream_empty_n == 1'b0)) & (icmp_ln155_fu_165_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        input_stream_read = 1'b1;
    end else begin
        input_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln155_fu_165_p2 == 1'd0) & (input_stream_empty_n == 1'b0)) & (icmp_ln155_fu_165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln162_reg_372_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        temp_stream_blk_n = temp_stream_full_n;
    end else begin
        temp_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln162_reg_372_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp_stream_write = 1'b1;
    end else begin
        temp_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln155_fu_165_p2 == 1'd0) & (input_stream_empty_n == 1'b0)) & (icmp_ln155_fu_165_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln155_fu_165_p2 == 1'd0) & (input_stream_empty_n == 1'b0)) & (icmp_ln155_fu_165_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((input_stream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Sum_fu_304_p2 = ($signed(sext_ln170_1_fu_301_p1) + $signed(grp_fu_320_p3));

assign X_1_fu_171_p2 = (X_reg_84 + 9'd1);

assign Y_1_fu_159_p2 = (Y_reg_73 + 9'd1);

assign add_ln170_1_fu_267_p2 = ($signed(sext_ln170_fu_263_p1) + $signed(tmp1_i_cast_fu_225_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (input_stream_empty_n == 1'b0) & (icmp_ln162_reg_372 == 1'd0)) | ((temp_stream_full_n == 1'b0) & (icmp_ln162_reg_372_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (input_stream_empty_n == 1'b0) & (icmp_ln162_reg_372 == 1'd0)) | ((temp_stream_full_n == 1'b0) & (icmp_ln162_reg_372_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (input_stream_empty_n == 1'b0) & (icmp_ln162_reg_372 == 1'd0)) | ((temp_stream_full_n == 1'b0) & (icmp_ln162_reg_372_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter4 = ((temp_stream_full_n == 1'b0) & (icmp_ln162_reg_372_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln155_fu_165_p2 == 1'd0) & (input_stream_empty_n == 1'b0));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((input_stream_empty_n == 1'b0) & (icmp_ln162_reg_372 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_fu_320_p0 = grp_fu_320_p00;

assign grp_fu_320_p00 = ap_phi_mux_temp_9_phi_fu_119_p4;

assign grp_fu_320_p1 = 15'd98;

assign grp_fu_320_p2 = (p_shl1_cast_i_fu_280_p1 - p_shl2_cast_i_fu_291_p1);

assign icmp_ln155_fu_165_p2 = ((Y_reg_73 == 9'd270) ? 1'b1 : 1'b0);

assign icmp_ln162_fu_177_p2 = ((X_reg_84 == 9'd474) ? 1'b1 : 1'b0);

assign p_shl1_cast_i_fu_280_p1 = p_shl1_i_fu_273_p3;

assign p_shl1_i_fu_273_p3 = {{tmp2_i_reg_386_pp0_iter2_reg}, {6'd0}};

assign p_shl2_cast_i_fu_291_p1 = p_shl2_i_fu_284_p3;

assign p_shl2_i_fu_284_p3 = {{tmp2_i_reg_386_pp0_iter2_reg}, {1'd0}};

assign p_shl_cast_i_fu_253_p1 = p_shl_i_fu_245_p3;

assign p_shl_i_fu_245_p3 = {{tmp4_i_fu_235_p2}, {4'd0}};

assign sext_ln170_1_fu_301_p1 = $signed(add_ln170_1_reg_392_pp0_iter3_reg);

assign sext_ln170_fu_263_p1 = $signed(tmp5_i_fu_257_p2);

assign start_out = real_start;

assign temp_6_cast_i_fu_203_p1 = ap_phi_mux_temp_6_phi_fu_152_p4;

assign temp_stream_din = {{Sum_fu_304_p2[15:8]}};

assign tmp1_i_cast_fu_225_p1 = tmp1_i_fu_217_p3;

assign tmp1_i_fu_217_p3 = {{tmp6_i_fu_211_p2}, {1'd0}};

assign tmp2_i_fu_229_p2 = (zext_ln170_1_fu_187_p1 + zext_ln166_fu_195_p1);

assign tmp4_cast9_i_fu_241_p1 = tmp4_i_fu_235_p2;

assign tmp4_i_fu_235_p2 = (zext_ln170_fu_183_p1 + zext_ln166_1_fu_199_p1);

assign tmp5_i_fu_257_p2 = (p_shl_cast_i_fu_253_p1 - tmp4_cast9_i_fu_241_p1);

assign tmp6_i_fu_211_p2 = (tmp_7_cast_i_fu_207_p1 + temp_6_cast_i_fu_203_p1);

assign tmp_7_cast_i_fu_207_p1 = input_stream_dout;

assign zext_ln166_1_fu_199_p1 = ap_phi_mux_temp_11_phi_fu_98_p4;

assign zext_ln166_fu_195_p1 = ap_phi_mux_temp_10_phi_fu_108_p4;

assign zext_ln170_1_fu_187_p1 = ap_phi_mux_temp_8_phi_fu_130_p4;

assign zext_ln170_fu_183_p1 = ap_phi_mux_temp_7_phi_fu_141_p4;

endmodule //Filter_HW_stream_Filter_horizontal_HW_stream
